
Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e60  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08002f6c  08002f6c  00012f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003064  08003064  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003064  08003064  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003064  08003064  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003064  08003064  00013064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003068  08003068  00013068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800306c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  20000070  080030dc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  080030dc  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a98b  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b11  00000000  00000000  0002aa24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  0002c538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  0002cfb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f70  00000000  00000000  0002d950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a7b8  00000000  00000000  000458c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008762b  00000000  00000000  00050078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d76a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003280  00000000  00000000  000d76f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f54 	.word	0x08002f54

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002f54 	.word	0x08002f54

0800014c <__clear_cache>:
 800014c:	4770      	bx	lr
 800014e:	bf00      	nop

08000150 <SCH_Init>:
#define SCH_MAX_TASKS 5

sTask SCH_tasks_G[SCH_MAX_TASKS];
uint32_t current_index_task = 0;

void SCH_Init(void) {
 8000150:	b480      	push	{r7}
 8000152:	af00      	add	r7, sp, #0
  current_index_task = 0;
 8000154:	4b03      	ldr	r3, [pc, #12]	; (8000164 <SCH_Init+0x14>)
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
}
 800015a:	bf00      	nop
 800015c:	46bd      	mov	sp, r7
 800015e:	bc80      	pop	{r7}
 8000160:	4770      	bx	lr
 8000162:	bf00      	nop
 8000164:	2000008c 	.word	0x2000008c

08000168 <SCH_Update>:

void SCH_Update(void) {
 8000168:	b480      	push	{r7}
 800016a:	b083      	sub	sp, #12
 800016c:	af00      	add	r7, sp, #0
  for(int i = 0; i < current_index_task; i++) {
 800016e:	2300      	movs	r3, #0
 8000170:	607b      	str	r3, [r7, #4]
 8000172:	e046      	b.n	8000202 <SCH_Update+0x9a>
    if(SCH_tasks_G[i].Delay > 0) {
 8000174:	4928      	ldr	r1, [pc, #160]	; (8000218 <SCH_Update+0xb0>)
 8000176:	687a      	ldr	r2, [r7, #4]
 8000178:	4613      	mov	r3, r2
 800017a:	009b      	lsls	r3, r3, #2
 800017c:	4413      	add	r3, r2
 800017e:	009b      	lsls	r3, r3, #2
 8000180:	440b      	add	r3, r1
 8000182:	3304      	adds	r3, #4
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	2b00      	cmp	r3, #0
 8000188:	d013      	beq.n	80001b2 <SCH_Update+0x4a>
      SCH_tasks_G[i].Delay--;
 800018a:	4923      	ldr	r1, [pc, #140]	; (8000218 <SCH_Update+0xb0>)
 800018c:	687a      	ldr	r2, [r7, #4]
 800018e:	4613      	mov	r3, r2
 8000190:	009b      	lsls	r3, r3, #2
 8000192:	4413      	add	r3, r2
 8000194:	009b      	lsls	r3, r3, #2
 8000196:	440b      	add	r3, r1
 8000198:	3304      	adds	r3, #4
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	1e59      	subs	r1, r3, #1
 800019e:	481e      	ldr	r0, [pc, #120]	; (8000218 <SCH_Update+0xb0>)
 80001a0:	687a      	ldr	r2, [r7, #4]
 80001a2:	4613      	mov	r3, r2
 80001a4:	009b      	lsls	r3, r3, #2
 80001a6:	4413      	add	r3, r2
 80001a8:	009b      	lsls	r3, r3, #2
 80001aa:	4403      	add	r3, r0
 80001ac:	3304      	adds	r3, #4
 80001ae:	6019      	str	r1, [r3, #0]
 80001b0:	e024      	b.n	80001fc <SCH_Update+0x94>
    }
    else {
      SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 80001b2:	4919      	ldr	r1, [pc, #100]	; (8000218 <SCH_Update+0xb0>)
 80001b4:	687a      	ldr	r2, [r7, #4]
 80001b6:	4613      	mov	r3, r2
 80001b8:	009b      	lsls	r3, r3, #2
 80001ba:	4413      	add	r3, r2
 80001bc:	009b      	lsls	r3, r3, #2
 80001be:	440b      	add	r3, r1
 80001c0:	3308      	adds	r3, #8
 80001c2:	6819      	ldr	r1, [r3, #0]
 80001c4:	4814      	ldr	r0, [pc, #80]	; (8000218 <SCH_Update+0xb0>)
 80001c6:	687a      	ldr	r2, [r7, #4]
 80001c8:	4613      	mov	r3, r2
 80001ca:	009b      	lsls	r3, r3, #2
 80001cc:	4413      	add	r3, r2
 80001ce:	009b      	lsls	r3, r3, #2
 80001d0:	4403      	add	r3, r0
 80001d2:	3304      	adds	r3, #4
 80001d4:	6019      	str	r1, [r3, #0]
      SCH_tasks_G[i].RunMe++;
 80001d6:	4910      	ldr	r1, [pc, #64]	; (8000218 <SCH_Update+0xb0>)
 80001d8:	687a      	ldr	r2, [r7, #4]
 80001da:	4613      	mov	r3, r2
 80001dc:	009b      	lsls	r3, r3, #2
 80001de:	4413      	add	r3, r2
 80001e0:	009b      	lsls	r3, r3, #2
 80001e2:	440b      	add	r3, r1
 80001e4:	330c      	adds	r3, #12
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	1c59      	adds	r1, r3, #1
 80001ea:	480b      	ldr	r0, [pc, #44]	; (8000218 <SCH_Update+0xb0>)
 80001ec:	687a      	ldr	r2, [r7, #4]
 80001ee:	4613      	mov	r3, r2
 80001f0:	009b      	lsls	r3, r3, #2
 80001f2:	4413      	add	r3, r2
 80001f4:	009b      	lsls	r3, r3, #2
 80001f6:	4403      	add	r3, r0
 80001f8:	330c      	adds	r3, #12
 80001fa:	6019      	str	r1, [r3, #0]
  for(int i = 0; i < current_index_task; i++) {
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	3301      	adds	r3, #1
 8000200:	607b      	str	r3, [r7, #4]
 8000202:	687a      	ldr	r2, [r7, #4]
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <SCH_Update+0xb4>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	429a      	cmp	r2, r3
 800020a:	d3b3      	bcc.n	8000174 <SCH_Update+0xc>
    }
  }
}
 800020c:	bf00      	nop
 800020e:	bf00      	nop
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	bc80      	pop	{r7}
 8000216:	4770      	bx	lr
 8000218:	200000a0 	.word	0x200000a0
 800021c:	2000008c 	.word	0x2000008c

08000220 <SCH_Add_Task>:

void SCH_Add_Task(void (*pFunction)(), uint32_t Delay, uint32_t Period) {
 8000220:	b480      	push	{r7}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
  if(current_index_task < SCH_MAX_TASKS) {
 800022c:	4b22      	ldr	r3, [pc, #136]	; (80002b8 <SCH_Add_Task+0x98>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	2b04      	cmp	r3, #4
 8000232:	d83b      	bhi.n	80002ac <SCH_Add_Task+0x8c>
    SCH_tasks_G[current_index_task].pTask = pFunction;
 8000234:	4b20      	ldr	r3, [pc, #128]	; (80002b8 <SCH_Add_Task+0x98>)
 8000236:	681a      	ldr	r2, [r3, #0]
 8000238:	4920      	ldr	r1, [pc, #128]	; (80002bc <SCH_Add_Task+0x9c>)
 800023a:	4613      	mov	r3, r2
 800023c:	009b      	lsls	r3, r3, #2
 800023e:	4413      	add	r3, r2
 8000240:	009b      	lsls	r3, r3, #2
 8000242:	440b      	add	r3, r1
 8000244:	68fa      	ldr	r2, [r7, #12]
 8000246:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[current_index_task].Delay = Delay;
 8000248:	4b1b      	ldr	r3, [pc, #108]	; (80002b8 <SCH_Add_Task+0x98>)
 800024a:	681a      	ldr	r2, [r3, #0]
 800024c:	491b      	ldr	r1, [pc, #108]	; (80002bc <SCH_Add_Task+0x9c>)
 800024e:	4613      	mov	r3, r2
 8000250:	009b      	lsls	r3, r3, #2
 8000252:	4413      	add	r3, r2
 8000254:	009b      	lsls	r3, r3, #2
 8000256:	440b      	add	r3, r1
 8000258:	3304      	adds	r3, #4
 800025a:	68ba      	ldr	r2, [r7, #8]
 800025c:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[current_index_task].Period = Period;
 800025e:	4b16      	ldr	r3, [pc, #88]	; (80002b8 <SCH_Add_Task+0x98>)
 8000260:	681a      	ldr	r2, [r3, #0]
 8000262:	4916      	ldr	r1, [pc, #88]	; (80002bc <SCH_Add_Task+0x9c>)
 8000264:	4613      	mov	r3, r2
 8000266:	009b      	lsls	r3, r3, #2
 8000268:	4413      	add	r3, r2
 800026a:	009b      	lsls	r3, r3, #2
 800026c:	440b      	add	r3, r1
 800026e:	3308      	adds	r3, #8
 8000270:	687a      	ldr	r2, [r7, #4]
 8000272:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[current_index_task].RunMe = 0;
 8000274:	4b10      	ldr	r3, [pc, #64]	; (80002b8 <SCH_Add_Task+0x98>)
 8000276:	681a      	ldr	r2, [r3, #0]
 8000278:	4910      	ldr	r1, [pc, #64]	; (80002bc <SCH_Add_Task+0x9c>)
 800027a:	4613      	mov	r3, r2
 800027c:	009b      	lsls	r3, r3, #2
 800027e:	4413      	add	r3, r2
 8000280:	009b      	lsls	r3, r3, #2
 8000282:	440b      	add	r3, r1
 8000284:	330c      	adds	r3, #12
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[current_index_task].TaskID = current_index_task;
 800028a:	4b0b      	ldr	r3, [pc, #44]	; (80002b8 <SCH_Add_Task+0x98>)
 800028c:	681a      	ldr	r2, [r3, #0]
 800028e:	4b0a      	ldr	r3, [pc, #40]	; (80002b8 <SCH_Add_Task+0x98>)
 8000290:	6819      	ldr	r1, [r3, #0]
 8000292:	480a      	ldr	r0, [pc, #40]	; (80002bc <SCH_Add_Task+0x9c>)
 8000294:	4613      	mov	r3, r2
 8000296:	009b      	lsls	r3, r3, #2
 8000298:	4413      	add	r3, r2
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	4403      	add	r3, r0
 800029e:	3310      	adds	r3, #16
 80002a0:	6019      	str	r1, [r3, #0]

    current_index_task++;
 80002a2:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <SCH_Add_Task+0x98>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	3301      	adds	r3, #1
 80002a8:	4a03      	ldr	r2, [pc, #12]	; (80002b8 <SCH_Add_Task+0x98>)
 80002aa:	6013      	str	r3, [r2, #0]
  }
}
 80002ac:	bf00      	nop
 80002ae:	3714      	adds	r7, #20
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bc80      	pop	{r7}
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	2000008c 	.word	0x2000008c
 80002bc:	200000a0 	.word	0x200000a0

080002c0 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void) {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
  for(int i = 0; i < current_index_task; i++) {
 80002c6:	2300      	movs	r3, #0
 80002c8:	607b      	str	r3, [r7, #4]
 80002ca:	e038      	b.n	800033e <SCH_Dispatch_Tasks+0x7e>
    if(SCH_tasks_G[i].RunMe > 0) {
 80002cc:	4921      	ldr	r1, [pc, #132]	; (8000354 <SCH_Dispatch_Tasks+0x94>)
 80002ce:	687a      	ldr	r2, [r7, #4]
 80002d0:	4613      	mov	r3, r2
 80002d2:	009b      	lsls	r3, r3, #2
 80002d4:	4413      	add	r3, r2
 80002d6:	009b      	lsls	r3, r3, #2
 80002d8:	440b      	add	r3, r1
 80002da:	330c      	adds	r3, #12
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d02a      	beq.n	8000338 <SCH_Dispatch_Tasks+0x78>
      SCH_tasks_G[i].RunMe--;
 80002e2:	491c      	ldr	r1, [pc, #112]	; (8000354 <SCH_Dispatch_Tasks+0x94>)
 80002e4:	687a      	ldr	r2, [r7, #4]
 80002e6:	4613      	mov	r3, r2
 80002e8:	009b      	lsls	r3, r3, #2
 80002ea:	4413      	add	r3, r2
 80002ec:	009b      	lsls	r3, r3, #2
 80002ee:	440b      	add	r3, r1
 80002f0:	330c      	adds	r3, #12
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	1e59      	subs	r1, r3, #1
 80002f6:	4817      	ldr	r0, [pc, #92]	; (8000354 <SCH_Dispatch_Tasks+0x94>)
 80002f8:	687a      	ldr	r2, [r7, #4]
 80002fa:	4613      	mov	r3, r2
 80002fc:	009b      	lsls	r3, r3, #2
 80002fe:	4413      	add	r3, r2
 8000300:	009b      	lsls	r3, r3, #2
 8000302:	4403      	add	r3, r0
 8000304:	330c      	adds	r3, #12
 8000306:	6019      	str	r1, [r3, #0]
      (*SCH_tasks_G[i].pTask)();
 8000308:	4912      	ldr	r1, [pc, #72]	; (8000354 <SCH_Dispatch_Tasks+0x94>)
 800030a:	687a      	ldr	r2, [r7, #4]
 800030c:	4613      	mov	r3, r2
 800030e:	009b      	lsls	r3, r3, #2
 8000310:	4413      	add	r3, r2
 8000312:	009b      	lsls	r3, r3, #2
 8000314:	440b      	add	r3, r1
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4798      	blx	r3
      if(SCH_tasks_G[i].Period == 0)
 800031a:	490e      	ldr	r1, [pc, #56]	; (8000354 <SCH_Dispatch_Tasks+0x94>)
 800031c:	687a      	ldr	r2, [r7, #4]
 800031e:	4613      	mov	r3, r2
 8000320:	009b      	lsls	r3, r3, #2
 8000322:	4413      	add	r3, r2
 8000324:	009b      	lsls	r3, r3, #2
 8000326:	440b      	add	r3, r1
 8000328:	3308      	adds	r3, #8
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d103      	bne.n	8000338 <SCH_Dispatch_Tasks+0x78>
    	  SCH_Delete_Task(i);
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	4618      	mov	r0, r3
 8000334:	f000 f812 	bl	800035c <SCH_Delete_Task>
  for(int i = 0; i < current_index_task; i++) {
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	3301      	adds	r3, #1
 800033c:	607b      	str	r3, [r7, #4]
 800033e:	687a      	ldr	r2, [r7, #4]
 8000340:	4b05      	ldr	r3, [pc, #20]	; (8000358 <SCH_Dispatch_Tasks+0x98>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	429a      	cmp	r2, r3
 8000346:	d3c1      	bcc.n	80002cc <SCH_Dispatch_Tasks+0xc>
    }
  }
}
 8000348:	bf00      	nop
 800034a:	bf00      	nop
 800034c:	3708      	adds	r7, #8
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	200000a0 	.word	0x200000a0
 8000358:	2000008c 	.word	0x2000008c

0800035c <SCH_Delete_Task>:
void SCH_Delete_Task(uint32_t ID)
{
 800035c:	b480      	push	{r7}
 800035e:	b085      	sub	sp, #20
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  if(ID < current_index_task - 1)
 8000364:	4b39      	ldr	r3, [pc, #228]	; (800044c <SCH_Delete_Task+0xf0>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	3b01      	subs	r3, #1
 800036a:	687a      	ldr	r2, [r7, #4]
 800036c:	429a      	cmp	r2, r3
 800036e:	d263      	bcs.n	8000438 <SCH_Delete_Task+0xdc>
  {
	for(int i = ID; i < current_index_task - 1; i++)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	60fb      	str	r3, [r7, #12]
 8000374:	e05a      	b.n	800042c <SCH_Delete_Task+0xd0>
	{
		SCH_tasks_G[i].pTask = SCH_tasks_G[i].pTask;
 8000376:	4936      	ldr	r1, [pc, #216]	; (8000450 <SCH_Delete_Task+0xf4>)
 8000378:	68fa      	ldr	r2, [r7, #12]
 800037a:	4613      	mov	r3, r2
 800037c:	009b      	lsls	r3, r3, #2
 800037e:	4413      	add	r3, r2
 8000380:	009b      	lsls	r3, r3, #2
 8000382:	440b      	add	r3, r1
 8000384:	6819      	ldr	r1, [r3, #0]
 8000386:	4832      	ldr	r0, [pc, #200]	; (8000450 <SCH_Delete_Task+0xf4>)
 8000388:	68fa      	ldr	r2, [r7, #12]
 800038a:	4613      	mov	r3, r2
 800038c:	009b      	lsls	r3, r3, #2
 800038e:	4413      	add	r3, r2
 8000390:	009b      	lsls	r3, r3, #2
 8000392:	4403      	add	r3, r0
 8000394:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[i].Delay = SCH_tasks_G[i].Delay;
 8000396:	492e      	ldr	r1, [pc, #184]	; (8000450 <SCH_Delete_Task+0xf4>)
 8000398:	68fa      	ldr	r2, [r7, #12]
 800039a:	4613      	mov	r3, r2
 800039c:	009b      	lsls	r3, r3, #2
 800039e:	4413      	add	r3, r2
 80003a0:	009b      	lsls	r3, r3, #2
 80003a2:	440b      	add	r3, r1
 80003a4:	3304      	adds	r3, #4
 80003a6:	6819      	ldr	r1, [r3, #0]
 80003a8:	4829      	ldr	r0, [pc, #164]	; (8000450 <SCH_Delete_Task+0xf4>)
 80003aa:	68fa      	ldr	r2, [r7, #12]
 80003ac:	4613      	mov	r3, r2
 80003ae:	009b      	lsls	r3, r3, #2
 80003b0:	4413      	add	r3, r2
 80003b2:	009b      	lsls	r3, r3, #2
 80003b4:	4403      	add	r3, r0
 80003b6:	3304      	adds	r3, #4
 80003b8:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[i].Period = SCH_tasks_G[i].Period;
 80003ba:	4925      	ldr	r1, [pc, #148]	; (8000450 <SCH_Delete_Task+0xf4>)
 80003bc:	68fa      	ldr	r2, [r7, #12]
 80003be:	4613      	mov	r3, r2
 80003c0:	009b      	lsls	r3, r3, #2
 80003c2:	4413      	add	r3, r2
 80003c4:	009b      	lsls	r3, r3, #2
 80003c6:	440b      	add	r3, r1
 80003c8:	3308      	adds	r3, #8
 80003ca:	6819      	ldr	r1, [r3, #0]
 80003cc:	4820      	ldr	r0, [pc, #128]	; (8000450 <SCH_Delete_Task+0xf4>)
 80003ce:	68fa      	ldr	r2, [r7, #12]
 80003d0:	4613      	mov	r3, r2
 80003d2:	009b      	lsls	r3, r3, #2
 80003d4:	4413      	add	r3, r2
 80003d6:	009b      	lsls	r3, r3, #2
 80003d8:	4403      	add	r3, r0
 80003da:	3308      	adds	r3, #8
 80003dc:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[i].RunMe = SCH_tasks_G[i].RunMe;
 80003de:	491c      	ldr	r1, [pc, #112]	; (8000450 <SCH_Delete_Task+0xf4>)
 80003e0:	68fa      	ldr	r2, [r7, #12]
 80003e2:	4613      	mov	r3, r2
 80003e4:	009b      	lsls	r3, r3, #2
 80003e6:	4413      	add	r3, r2
 80003e8:	009b      	lsls	r3, r3, #2
 80003ea:	440b      	add	r3, r1
 80003ec:	330c      	adds	r3, #12
 80003ee:	6819      	ldr	r1, [r3, #0]
 80003f0:	4817      	ldr	r0, [pc, #92]	; (8000450 <SCH_Delete_Task+0xf4>)
 80003f2:	68fa      	ldr	r2, [r7, #12]
 80003f4:	4613      	mov	r3, r2
 80003f6:	009b      	lsls	r3, r3, #2
 80003f8:	4413      	add	r3, r2
 80003fa:	009b      	lsls	r3, r3, #2
 80003fc:	4403      	add	r3, r0
 80003fe:	330c      	adds	r3, #12
 8000400:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[i].TaskID = SCH_tasks_G[i].TaskID;
 8000402:	4913      	ldr	r1, [pc, #76]	; (8000450 <SCH_Delete_Task+0xf4>)
 8000404:	68fa      	ldr	r2, [r7, #12]
 8000406:	4613      	mov	r3, r2
 8000408:	009b      	lsls	r3, r3, #2
 800040a:	4413      	add	r3, r2
 800040c:	009b      	lsls	r3, r3, #2
 800040e:	440b      	add	r3, r1
 8000410:	3310      	adds	r3, #16
 8000412:	6819      	ldr	r1, [r3, #0]
 8000414:	480e      	ldr	r0, [pc, #56]	; (8000450 <SCH_Delete_Task+0xf4>)
 8000416:	68fa      	ldr	r2, [r7, #12]
 8000418:	4613      	mov	r3, r2
 800041a:	009b      	lsls	r3, r3, #2
 800041c:	4413      	add	r3, r2
 800041e:	009b      	lsls	r3, r3, #2
 8000420:	4403      	add	r3, r0
 8000422:	3310      	adds	r3, #16
 8000424:	6019      	str	r1, [r3, #0]
	for(int i = ID; i < current_index_task - 1; i++)
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	3301      	adds	r3, #1
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	4b07      	ldr	r3, [pc, #28]	; (800044c <SCH_Delete_Task+0xf0>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	1e5a      	subs	r2, r3, #1
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	429a      	cmp	r2, r3
 8000436:	d89e      	bhi.n	8000376 <SCH_Delete_Task+0x1a>
	}
  }
  current_index_task--;
 8000438:	4b04      	ldr	r3, [pc, #16]	; (800044c <SCH_Delete_Task+0xf0>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	3b01      	subs	r3, #1
 800043e:	4a03      	ldr	r2, [pc, #12]	; (800044c <SCH_Delete_Task+0xf0>)
 8000440:	6013      	str	r3, [r2, #0]
}
 8000442:	bf00      	nop
 8000444:	3714      	adds	r7, #20
 8000446:	46bd      	mov	sp, r7
 8000448:	bc80      	pop	{r7}
 800044a:	4770      	bx	lr
 800044c:	2000008c 	.word	0x2000008c
 8000450:	200000a0 	.word	0x200000a0

08000454 <LED1>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void LED1(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(GPIOA, LED1_Pin);
 8000458:	2102      	movs	r1, #2
 800045a:	4802      	ldr	r0, [pc, #8]	; (8000464 <LED1+0x10>)
 800045c:	f000 fe0a 	bl	8001074 <HAL_GPIO_TogglePin>
}
 8000460:	bf00      	nop
 8000462:	bd80      	pop	{r7, pc}
 8000464:	40010800 	.word	0x40010800

08000468 <LED2>:
void LED2(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(GPIOA, LED2_Pin);
 800046c:	2104      	movs	r1, #4
 800046e:	4802      	ldr	r0, [pc, #8]	; (8000478 <LED2+0x10>)
 8000470:	f000 fe00 	bl	8001074 <HAL_GPIO_TogglePin>
}
 8000474:	bf00      	nop
 8000476:	bd80      	pop	{r7, pc}
 8000478:	40010800 	.word	0x40010800

0800047c <LED3>:
void LED3(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(GPIOA, LED3_Pin);
 8000480:	2108      	movs	r1, #8
 8000482:	4802      	ldr	r0, [pc, #8]	; (800048c <LED3+0x10>)
 8000484:	f000 fdf6 	bl	8001074 <HAL_GPIO_TogglePin>
}
 8000488:	bf00      	nop
 800048a:	bd80      	pop	{r7, pc}
 800048c:	40010800 	.word	0x40010800

08000490 <LED4>:
void LED4(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(GPIOA, LED4_Pin);
 8000494:	2110      	movs	r1, #16
 8000496:	4802      	ldr	r0, [pc, #8]	; (80004a0 <LED4+0x10>)
 8000498:	f000 fdec 	bl	8001074 <HAL_GPIO_TogglePin>
}
 800049c:	bf00      	nop
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	40010800 	.word	0x40010800

080004a4 <LED5>:
void LED5(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(GPIOA, LED5_Pin);
 80004a8:	2120      	movs	r1, #32
 80004aa:	4802      	ldr	r0, [pc, #8]	; (80004b4 <LED5+0x10>)
 80004ac:	f000 fde2 	bl	8001074 <HAL_GPIO_TogglePin>
}
 80004b0:	bf00      	nop
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	40010800 	.word	0x40010800

080004b8 <get_time.7020>:
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	uint32_t get_time(void) {
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	f8c7 c004 	str.w	ip, [r7, #4]
	    return timer_ticks * 10;  //
 80004c2:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <get_time.7020+0x20>)
 80004c4:	681a      	ldr	r2, [r3, #0]
 80004c6:	4613      	mov	r3, r2
 80004c8:	009b      	lsls	r3, r3, #2
 80004ca:	4413      	add	r3, r2
 80004cc:	005b      	lsls	r3, r3, #1
	}
 80004ce:	4618      	mov	r0, r3
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr
 80004d8:	20000090 	.word	0x20000090

080004dc <main>:
{
 80004dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004de:	b08b      	sub	sp, #44	; 0x2c
 80004e0:	af00      	add	r7, sp, #0
int main(void)
 80004e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80004e6:	627b      	str	r3, [r7, #36]	; 0x24
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	f103 0410 	add.w	r4, r3, #16
 80004ee:	1d3d      	adds	r5, r7, #4
 80004f0:	4b2d      	ldr	r3, [pc, #180]	; (80005a8 <main+0xcc>)
 80004f2:	4626      	mov	r6, r4
 80004f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004f6:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80004fa:	60a5      	str	r5, [r4, #8]
 80004fc:	4b2b      	ldr	r3, [pc, #172]	; (80005ac <main+0xd0>)
 80004fe:	60e3      	str	r3, [r4, #12]
 8000500:	f104 0310 	add.w	r3, r4, #16
 8000504:	4619      	mov	r1, r3
 8000506:	4620      	mov	r0, r4
 8000508:	f7ff fe20 	bl	800014c <__clear_cache>
 800050c:	1d3c      	adds	r4, r7, #4
 800050e:	1d3d      	adds	r5, r7, #4
 8000510:	4b25      	ldr	r3, [pc, #148]	; (80005a8 <main+0xcc>)
 8000512:	4626      	mov	r6, r4
 8000514:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000516:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 800051a:	60a5      	str	r5, [r4, #8]
 800051c:	4b24      	ldr	r3, [pc, #144]	; (80005b0 <main+0xd4>)
 800051e:	60e3      	str	r3, [r4, #12]
 8000520:	f104 0310 	add.w	r3, r4, #16
 8000524:	4619      	mov	r1, r3
 8000526:	4620      	mov	r0, r4
 8000528:	f7ff fe10 	bl	800014c <__clear_cache>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052c:	f000 faa0 	bl	8000a70 <HAL_Init>

  /* USER CODE BEGIN Init */
  SCH_Add_Task(Callback_10ms, 1, 1);
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	3310      	adds	r3, #16
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	2201      	movs	r2, #1
 800053a:	2101      	movs	r1, #1
 800053c:	4618      	mov	r0, r3
 800053e:	f7ff fe6f 	bl	8000220 <SCH_Add_Task>
  SCH_Add_Task(Callback_500ms, 50, 50);
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	2232      	movs	r2, #50	; 0x32
 800054a:	2132      	movs	r1, #50	; 0x32
 800054c:	4618      	mov	r0, r3
 800054e:	f7ff fe67 	bl	8000220 <SCH_Add_Task>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000552:	f000 f863 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8000556:	f000 f89d 	bl	8000694 <MX_TIM2_Init>
  MX_GPIO_Init();
 800055a:	f000 f8e7 	bl	800072c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800055e:	4815      	ldr	r0, [pc, #84]	; (80005b4 <main+0xd8>)
 8000560:	f001 f9ce 	bl	8001900 <HAL_TIM_Base_Start_IT>
  SCH_Init();
 8000564:	f7ff fdf4 	bl	8000150 <SCH_Init>
  SCH_Add_Task(LED1, 100, 50);
 8000568:	2232      	movs	r2, #50	; 0x32
 800056a:	2164      	movs	r1, #100	; 0x64
 800056c:	4812      	ldr	r0, [pc, #72]	; (80005b8 <main+0xdc>)
 800056e:	f7ff fe57 	bl	8000220 <SCH_Add_Task>
  SCH_Add_Task(LED2, 200, 100);
 8000572:	2264      	movs	r2, #100	; 0x64
 8000574:	21c8      	movs	r1, #200	; 0xc8
 8000576:	4811      	ldr	r0, [pc, #68]	; (80005bc <main+0xe0>)
 8000578:	f7ff fe52 	bl	8000220 <SCH_Add_Task>
  SCH_Add_Task(LED3, 300, 150);
 800057c:	2296      	movs	r2, #150	; 0x96
 800057e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000582:	480f      	ldr	r0, [pc, #60]	; (80005c0 <main+0xe4>)
 8000584:	f7ff fe4c 	bl	8000220 <SCH_Add_Task>
  SCH_Add_Task(LED4, 400, 200);
 8000588:	22c8      	movs	r2, #200	; 0xc8
 800058a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800058e:	480d      	ldr	r0, [pc, #52]	; (80005c4 <main+0xe8>)
 8000590:	f7ff fe46 	bl	8000220 <SCH_Add_Task>
  SCH_Add_Task(LED5, 500, 250);
 8000594:	22fa      	movs	r2, #250	; 0xfa
 8000596:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800059a:	480b      	ldr	r0, [pc, #44]	; (80005c8 <main+0xec>)
 800059c:	f7ff fe40 	bl	8000220 <SCH_Add_Task>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  SCH_Dispatch_Tasks();
 80005a0:	f7ff fe8e 	bl	80002c0 <SCH_Dispatch_Tasks>
 80005a4:	e7fc      	b.n	80005a0 <main+0xc4>
 80005a6:	bf00      	nop
 80005a8:	08002f6c 	.word	0x08002f6c
 80005ac:	080005cd 	.word	0x080005cd
 80005b0:	080005f5 	.word	0x080005f5
 80005b4:	20000104 	.word	0x20000104
 80005b8:	08000455 	.word	0x08000455
 80005bc:	08000469 	.word	0x08000469
 80005c0:	0800047d 	.word	0x0800047d
 80005c4:	08000491 	.word	0x08000491
 80005c8:	080004a5 	.word	0x080004a5

080005cc <Callback_10ms.7022>:
	void Callback_10ms() {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4663      	mov	r3, ip
 80005d4:	f8c7 c004 	str.w	ip, [r7, #4]
	    printf("10ms callback: %lu\n", get_time());
 80005d8:	469c      	mov	ip, r3
 80005da:	f7ff ff6d 	bl	80004b8 <get_time.7020>
 80005de:	4603      	mov	r3, r0
 80005e0:	4619      	mov	r1, r3
 80005e2:	4803      	ldr	r0, [pc, #12]	; (80005f0 <Callback_10ms.7022+0x24>)
 80005e4:	f001 fd56 	bl	8002094 <iprintf>
	}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	08002f7c 	.word	0x08002f7c

080005f4 <Callback_500ms.7024>:
	void Callback_500ms() {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4663      	mov	r3, ip
 80005fc:	f8c7 c004 	str.w	ip, [r7, #4]
	    printf("500ms callback: %lu\n", get_time());
 8000600:	469c      	mov	ip, r3
 8000602:	f7ff ff59 	bl	80004b8 <get_time.7020>
 8000606:	4603      	mov	r3, r0
 8000608:	4619      	mov	r1, r3
 800060a:	4803      	ldr	r0, [pc, #12]	; (8000618 <Callback_500ms.7024+0x24>)
 800060c:	f001 fd42 	bl	8002094 <iprintf>
	}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	08002f90 	.word	0x08002f90

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b090      	sub	sp, #64	; 0x40
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0318 	add.w	r3, r7, #24
 8000626:	2228      	movs	r2, #40	; 0x28
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f001 fd2a 	bl	8002084 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800063e:	2302      	movs	r3, #2
 8000640:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000642:	2301      	movs	r3, #1
 8000644:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000646:	2310      	movs	r3, #16
 8000648:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800064a:	2300      	movs	r3, #0
 800064c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064e:	f107 0318 	add.w	r3, r7, #24
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fd28 	bl	80010a8 <HAL_RCC_OscConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800065e:	f000 f8ad 	bl	80007bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	230f      	movs	r3, #15
 8000664:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000666:	2300      	movs	r3, #0
 8000668:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f000 ff94 	bl	80015a8 <HAL_RCC_ClockConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000686:	f000 f899 	bl	80007bc <Error_Handler>
  }
}
 800068a:	bf00      	nop
 800068c:	3740      	adds	r7, #64	; 0x40
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800069a:	f107 0308 	add.w	r3, r7, #8
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a8:	463b      	mov	r3, r7
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006b0:	4b1d      	ldr	r3, [pc, #116]	; (8000728 <MX_TIM2_Init+0x94>)
 80006b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80006b8:	4b1b      	ldr	r3, [pc, #108]	; (8000728 <MX_TIM2_Init+0x94>)
 80006ba:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80006be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c0:	4b19      	ldr	r3, [pc, #100]	; (8000728 <MX_TIM2_Init+0x94>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80006c6:	4b18      	ldr	r3, [pc, #96]	; (8000728 <MX_TIM2_Init+0x94>)
 80006c8:	2209      	movs	r2, #9
 80006ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006cc:	4b16      	ldr	r3, [pc, #88]	; (8000728 <MX_TIM2_Init+0x94>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006d2:	4b15      	ldr	r3, [pc, #84]	; (8000728 <MX_TIM2_Init+0x94>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006d8:	4813      	ldr	r0, [pc, #76]	; (8000728 <MX_TIM2_Init+0x94>)
 80006da:	f001 f8c1 	bl	8001860 <HAL_TIM_Base_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80006e4:	f000 f86a 	bl	80007bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006ee:	f107 0308 	add.w	r3, r7, #8
 80006f2:	4619      	mov	r1, r3
 80006f4:	480c      	ldr	r0, [pc, #48]	; (8000728 <MX_TIM2_Init+0x94>)
 80006f6:	f001 fa57 	bl	8001ba8 <HAL_TIM_ConfigClockSource>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000700:	f000 f85c 	bl	80007bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000704:	2300      	movs	r3, #0
 8000706:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800070c:	463b      	mov	r3, r7
 800070e:	4619      	mov	r1, r3
 8000710:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_TIM2_Init+0x94>)
 8000712:	f001 fc23 	bl	8001f5c <HAL_TIMEx_MasterConfigSynchronization>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800071c:	f000 f84e 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	3718      	adds	r7, #24
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000104 	.word	0x20000104

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 0308 	add.w	r3, r7, #8
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_GPIO_Init+0x5c>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	4a10      	ldr	r2, [pc, #64]	; (8000788 <MX_GPIO_Init+0x5c>)
 8000746:	f043 0304 	orr.w	r3, r3, #4
 800074a:	6193      	str	r3, [r2, #24]
 800074c:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_GPIO_Init+0x5c>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	f003 0304 	and.w	r3, r3, #4
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8000758:	2200      	movs	r2, #0
 800075a:	213e      	movs	r1, #62	; 0x3e
 800075c:	480b      	ldr	r0, [pc, #44]	; (800078c <MX_GPIO_Init+0x60>)
 800075e:	f000 fc71 	bl	8001044 <HAL_GPIO_WritePin>
                          |LED5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin
                           LED5_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin
 8000762:	233e      	movs	r3, #62	; 0x3e
 8000764:	60bb      	str	r3, [r7, #8]
                          |LED5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000766:	2301      	movs	r3, #1
 8000768:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076e:	2302      	movs	r3, #2
 8000770:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	4619      	mov	r1, r3
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_GPIO_Init+0x60>)
 800077a:	f000 fae9 	bl	8000d50 <HAL_GPIO_Init>

}
 800077e:	bf00      	nop
 8000780:	3718      	adds	r7, #24
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40021000 	.word	0x40021000
 800078c:	40010800 	.word	0x40010800

08000790 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007a0:	d106      	bne.n	80007b0 <HAL_TIM_PeriodElapsedCallback+0x20>
        timer_ticks++;  // Tăng biến đếm mỗi khi có ngắt từ TIM2
 80007a2:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	3301      	adds	r3, #1
 80007a8:	4a03      	ldr	r2, [pc, #12]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80007aa:	6013      	str	r3, [r2, #0]
        SCH_Update();
 80007ac:	f7ff fcdc 	bl	8000168 <SCH_Update>
    }
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000090 	.word	0x20000090

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
}
 80007c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  while (1)
 80007c4:	e7fe      	b.n	80007c4 <Error_Handler+0x8>
	...

080007c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007ce:	4b15      	ldr	r3, [pc, #84]	; (8000824 <HAL_MspInit+0x5c>)
 80007d0:	699b      	ldr	r3, [r3, #24]
 80007d2:	4a14      	ldr	r2, [pc, #80]	; (8000824 <HAL_MspInit+0x5c>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6193      	str	r3, [r2, #24]
 80007da:	4b12      	ldr	r3, [pc, #72]	; (8000824 <HAL_MspInit+0x5c>)
 80007dc:	699b      	ldr	r3, [r3, #24]
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e6:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <HAL_MspInit+0x5c>)
 80007e8:	69db      	ldr	r3, [r3, #28]
 80007ea:	4a0e      	ldr	r2, [pc, #56]	; (8000824 <HAL_MspInit+0x5c>)
 80007ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f0:	61d3      	str	r3, [r2, #28]
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <HAL_MspInit+0x5c>)
 80007f4:	69db      	ldr	r3, [r3, #28]
 80007f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80007fe:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <HAL_MspInit+0x60>)
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	4a04      	ldr	r2, [pc, #16]	; (8000828 <HAL_MspInit+0x60>)
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081a:	bf00      	nop
 800081c:	3714      	adds	r7, #20
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr
 8000824:	40021000 	.word	0x40021000
 8000828:	40010000 	.word	0x40010000

0800082c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800083c:	d113      	bne.n	8000866 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800083e:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <HAL_TIM_Base_MspInit+0x44>)
 8000840:	69db      	ldr	r3, [r3, #28]
 8000842:	4a0b      	ldr	r2, [pc, #44]	; (8000870 <HAL_TIM_Base_MspInit+0x44>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	61d3      	str	r3, [r2, #28]
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <HAL_TIM_Base_MspInit+0x44>)
 800084c:	69db      	ldr	r3, [r3, #28]
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	2100      	movs	r1, #0
 800085a:	201c      	movs	r0, #28
 800085c:	f000 fa41 	bl	8000ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000860:	201c      	movs	r0, #28
 8000862:	f000 fa5a 	bl	8000d1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000866:	bf00      	nop
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40021000 	.word	0x40021000

08000874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000878:	e7fe      	b.n	8000878 <NMI_Handler+0x4>

0800087a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087e:	e7fe      	b.n	800087e <HardFault_Handler+0x4>

08000880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000884:	e7fe      	b.n	8000884 <MemManage_Handler+0x4>

08000886 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800088a:	e7fe      	b.n	800088a <BusFault_Handler+0x4>

0800088c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000890:	e7fe      	b.n	8000890 <UsageFault_Handler+0x4>

08000892 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr

0800089e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr

080008aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr

080008b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ba:	f000 f91f 	bl	8000afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
	...

080008c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008c8:	4802      	ldr	r0, [pc, #8]	; (80008d4 <TIM2_IRQHandler+0x10>)
 80008ca:	f001 f865 	bl	8001998 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000104 	.word	0x20000104

080008d8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	60b9      	str	r1, [r7, #8]
 80008e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
 80008e8:	e00a      	b.n	8000900 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008ea:	f3af 8000 	nop.w
 80008ee:	4601      	mov	r1, r0
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	1c5a      	adds	r2, r3, #1
 80008f4:	60ba      	str	r2, [r7, #8]
 80008f6:	b2ca      	uxtb	r2, r1
 80008f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	3301      	adds	r3, #1
 80008fe:	617b      	str	r3, [r7, #20]
 8000900:	697a      	ldr	r2, [r7, #20]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	429a      	cmp	r2, r3
 8000906:	dbf0      	blt.n	80008ea <_read+0x12>
	}

return len;
 8000908:	687b      	ldr	r3, [r7, #4]
}
 800090a:	4618      	mov	r0, r3
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}

08000912 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b086      	sub	sp, #24
 8000916:	af00      	add	r7, sp, #0
 8000918:	60f8      	str	r0, [r7, #12]
 800091a:	60b9      	str	r1, [r7, #8]
 800091c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
 8000922:	e009      	b.n	8000938 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	1c5a      	adds	r2, r3, #1
 8000928:	60ba      	str	r2, [r7, #8]
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	4618      	mov	r0, r3
 800092e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	3301      	adds	r3, #1
 8000936:	617b      	str	r3, [r7, #20]
 8000938:	697a      	ldr	r2, [r7, #20]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	429a      	cmp	r2, r3
 800093e:	dbf1      	blt.n	8000924 <_write+0x12>
	}
	return len;
 8000940:	687b      	ldr	r3, [r7, #4]
}
 8000942:	4618      	mov	r0, r3
 8000944:	3718      	adds	r7, #24
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <_close>:

int _close(int file)
{
 800094a:	b480      	push	{r7}
 800094c:	b083      	sub	sp, #12
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
	return -1;
 8000952:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000956:	4618      	mov	r0, r3
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr

08000960 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000970:	605a      	str	r2, [r3, #4]
	return 0;
 8000972:	2300      	movs	r3, #0
}
 8000974:	4618      	mov	r0, r3
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr

0800097e <_isatty>:

int _isatty(int file)
{
 800097e:	b480      	push	{r7}
 8000980:	b083      	sub	sp, #12
 8000982:	af00      	add	r7, sp, #0
 8000984:	6078      	str	r0, [r7, #4]
	return 1;
 8000986:	2301      	movs	r3, #1
}
 8000988:	4618      	mov	r0, r3
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	bc80      	pop	{r7}
 8000990:	4770      	bx	lr

08000992 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000992:	b480      	push	{r7}
 8000994:	b085      	sub	sp, #20
 8000996:	af00      	add	r7, sp, #0
 8000998:	60f8      	str	r0, [r7, #12]
 800099a:	60b9      	str	r1, [r7, #8]
 800099c:	607a      	str	r2, [r7, #4]
	return 0;
 800099e:	2300      	movs	r3, #0
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3714      	adds	r7, #20
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr
	...

080009ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009b4:	4a14      	ldr	r2, [pc, #80]	; (8000a08 <_sbrk+0x5c>)
 80009b6:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <_sbrk+0x60>)
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009c0:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <_sbrk+0x64>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d102      	bne.n	80009ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009c8:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <_sbrk+0x64>)
 80009ca:	4a12      	ldr	r2, [pc, #72]	; (8000a14 <_sbrk+0x68>)
 80009cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <_sbrk+0x64>)
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4413      	add	r3, r2
 80009d6:	693a      	ldr	r2, [r7, #16]
 80009d8:	429a      	cmp	r2, r3
 80009da:	d207      	bcs.n	80009ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009dc:	f001 fb28 	bl	8002030 <__errno>
 80009e0:	4603      	mov	r3, r0
 80009e2:	220c      	movs	r2, #12
 80009e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009e6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ea:	e009      	b.n	8000a00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009ec:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <_sbrk+0x64>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009f2:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <_sbrk+0x64>)
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4413      	add	r3, r2
 80009fa:	4a05      	ldr	r2, [pc, #20]	; (8000a10 <_sbrk+0x64>)
 80009fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009fe:	68fb      	ldr	r3, [r7, #12]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3718      	adds	r7, #24
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20002800 	.word	0x20002800
 8000a0c:	00000400 	.word	0x00000400
 8000a10:	20000094 	.word	0x20000094
 8000a14:	20000160 	.word	0x20000160

08000a18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr

08000a24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a24:	f7ff fff8 	bl	8000a18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a28:	480b      	ldr	r0, [pc, #44]	; (8000a58 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a2a:	490c      	ldr	r1, [pc, #48]	; (8000a5c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a2c:	4a0c      	ldr	r2, [pc, #48]	; (8000a60 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a30:	e002      	b.n	8000a38 <LoopCopyDataInit>

08000a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a36:	3304      	adds	r3, #4

08000a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a3c:	d3f9      	bcc.n	8000a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3e:	4a09      	ldr	r2, [pc, #36]	; (8000a64 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a40:	4c09      	ldr	r4, [pc, #36]	; (8000a68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a44:	e001      	b.n	8000a4a <LoopFillZerobss>

08000a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a48:	3204      	adds	r2, #4

08000a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a4c:	d3fb      	bcc.n	8000a46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a4e:	f001 faf5 	bl	800203c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a52:	f7ff fd43 	bl	80004dc <main>
  bx lr
 8000a56:	4770      	bx	lr
  ldr r0, =_sdata
 8000a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a5c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a60:	0800306c 	.word	0x0800306c
  ldr r2, =_sbss
 8000a64:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a68:	20000160 	.word	0x20000160

08000a6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a6c:	e7fe      	b.n	8000a6c <ADC1_2_IRQHandler>
	...

08000a70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a74:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <HAL_Init+0x28>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a07      	ldr	r2, [pc, #28]	; (8000a98 <HAL_Init+0x28>)
 8000a7a:	f043 0310 	orr.w	r3, r3, #16
 8000a7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a80:	2003      	movs	r0, #3
 8000a82:	f000 f923 	bl	8000ccc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a86:	200f      	movs	r0, #15
 8000a88:	f000 f808 	bl	8000a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a8c:	f7ff fe9c 	bl	80007c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40022000 	.word	0x40022000

08000a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <HAL_InitTick+0x54>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <HAL_InitTick+0x58>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	4619      	mov	r1, r3
 8000aae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aba:	4618      	mov	r0, r3
 8000abc:	f000 f93b 	bl	8000d36 <HAL_SYSTICK_Config>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e00e      	b.n	8000ae8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2b0f      	cmp	r3, #15
 8000ace:	d80a      	bhi.n	8000ae6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	6879      	ldr	r1, [r7, #4]
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	f000 f903 	bl	8000ce2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000adc:	4a06      	ldr	r2, [pc, #24]	; (8000af8 <HAL_InitTick+0x5c>)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e000      	b.n	8000ae8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000000 	.word	0x20000000
 8000af4:	20000008 	.word	0x20000008
 8000af8:	20000004 	.word	0x20000004

08000afc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <HAL_IncTick+0x1c>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	461a      	mov	r2, r3
 8000b06:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <HAL_IncTick+0x20>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	4a03      	ldr	r2, [pc, #12]	; (8000b1c <HAL_IncTick+0x20>)
 8000b0e:	6013      	str	r3, [r2, #0]
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr
 8000b18:	20000008 	.word	0x20000008
 8000b1c:	2000014c 	.word	0x2000014c

08000b20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return uwTick;
 8000b24:	4b02      	ldr	r3, [pc, #8]	; (8000b30 <HAL_GetTick+0x10>)
 8000b26:	681b      	ldr	r3, [r3, #0]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr
 8000b30:	2000014c 	.word	0x2000014c

08000b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <__NVIC_SetPriorityGrouping+0x44>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b50:	4013      	ands	r3, r2
 8000b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b66:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <__NVIC_SetPriorityGrouping+0x44>)
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	60d3      	str	r3, [r2, #12]
}
 8000b6c:	bf00      	nop
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <__NVIC_GetPriorityGrouping+0x18>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	0a1b      	lsrs	r3, r3, #8
 8000b86:	f003 0307 	and.w	r3, r3, #7
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	db0b      	blt.n	8000bc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	f003 021f 	and.w	r2, r3, #31
 8000bb0:	4906      	ldr	r1, [pc, #24]	; (8000bcc <__NVIC_EnableIRQ+0x34>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	095b      	lsrs	r3, r3, #5
 8000bb8:	2001      	movs	r0, #1
 8000bba:	fa00 f202 	lsl.w	r2, r0, r2
 8000bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr
 8000bcc:	e000e100 	.word	0xe000e100

08000bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	6039      	str	r1, [r7, #0]
 8000bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	db0a      	blt.n	8000bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	490c      	ldr	r1, [pc, #48]	; (8000c1c <__NVIC_SetPriority+0x4c>)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	0112      	lsls	r2, r2, #4
 8000bf0:	b2d2      	uxtb	r2, r2
 8000bf2:	440b      	add	r3, r1
 8000bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf8:	e00a      	b.n	8000c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4908      	ldr	r1, [pc, #32]	; (8000c20 <__NVIC_SetPriority+0x50>)
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	f003 030f 	and.w	r3, r3, #15
 8000c06:	3b04      	subs	r3, #4
 8000c08:	0112      	lsls	r2, r2, #4
 8000c0a:	b2d2      	uxtb	r2, r2
 8000c0c:	440b      	add	r3, r1
 8000c0e:	761a      	strb	r2, [r3, #24]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000e100 	.word	0xe000e100
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b089      	sub	sp, #36	; 0x24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	f1c3 0307 	rsb	r3, r3, #7
 8000c3e:	2b04      	cmp	r3, #4
 8000c40:	bf28      	it	cs
 8000c42:	2304      	movcs	r3, #4
 8000c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	2b06      	cmp	r3, #6
 8000c4c:	d902      	bls.n	8000c54 <NVIC_EncodePriority+0x30>
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3b03      	subs	r3, #3
 8000c52:	e000      	b.n	8000c56 <NVIC_EncodePriority+0x32>
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c58:	f04f 32ff 	mov.w	r2, #4294967295
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	43da      	mvns	r2, r3
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	401a      	ands	r2, r3
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	fa01 f303 	lsl.w	r3, r1, r3
 8000c76:	43d9      	mvns	r1, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	4313      	orrs	r3, r2
         );
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3724      	adds	r7, #36	; 0x24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr

08000c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c98:	d301      	bcc.n	8000c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e00f      	b.n	8000cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <SysTick_Config+0x40>)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ca6:	210f      	movs	r1, #15
 8000ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cac:	f7ff ff90 	bl	8000bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <SysTick_Config+0x40>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cb6:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <SysTick_Config+0x40>)
 8000cb8:	2207      	movs	r2, #7
 8000cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	e000e010 	.word	0xe000e010

08000ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f7ff ff2d 	bl	8000b34 <__NVIC_SetPriorityGrouping>
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b086      	sub	sp, #24
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	4603      	mov	r3, r0
 8000cea:	60b9      	str	r1, [r7, #8]
 8000cec:	607a      	str	r2, [r7, #4]
 8000cee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf4:	f7ff ff42 	bl	8000b7c <__NVIC_GetPriorityGrouping>
 8000cf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	68b9      	ldr	r1, [r7, #8]
 8000cfe:	6978      	ldr	r0, [r7, #20]
 8000d00:	f7ff ff90 	bl	8000c24 <NVIC_EncodePriority>
 8000d04:	4602      	mov	r2, r0
 8000d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d0a:	4611      	mov	r1, r2
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ff5f 	bl	8000bd0 <__NVIC_SetPriority>
}
 8000d12:	bf00      	nop
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	4603      	mov	r3, r0
 8000d22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff35 	bl	8000b98 <__NVIC_EnableIRQ>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff ffa2 	bl	8000c88 <SysTick_Config>
 8000d44:	4603      	mov	r3, r0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b08b      	sub	sp, #44	; 0x2c
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d62:	e148      	b.n	8000ff6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d64:	2201      	movs	r2, #1
 8000d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	69fa      	ldr	r2, [r7, #28]
 8000d74:	4013      	ands	r3, r2
 8000d76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f040 8137 	bne.w	8000ff0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	4aa3      	ldr	r2, [pc, #652]	; (8001014 <HAL_GPIO_Init+0x2c4>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d05e      	beq.n	8000e4a <HAL_GPIO_Init+0xfa>
 8000d8c:	4aa1      	ldr	r2, [pc, #644]	; (8001014 <HAL_GPIO_Init+0x2c4>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d875      	bhi.n	8000e7e <HAL_GPIO_Init+0x12e>
 8000d92:	4aa1      	ldr	r2, [pc, #644]	; (8001018 <HAL_GPIO_Init+0x2c8>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d058      	beq.n	8000e4a <HAL_GPIO_Init+0xfa>
 8000d98:	4a9f      	ldr	r2, [pc, #636]	; (8001018 <HAL_GPIO_Init+0x2c8>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d86f      	bhi.n	8000e7e <HAL_GPIO_Init+0x12e>
 8000d9e:	4a9f      	ldr	r2, [pc, #636]	; (800101c <HAL_GPIO_Init+0x2cc>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d052      	beq.n	8000e4a <HAL_GPIO_Init+0xfa>
 8000da4:	4a9d      	ldr	r2, [pc, #628]	; (800101c <HAL_GPIO_Init+0x2cc>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d869      	bhi.n	8000e7e <HAL_GPIO_Init+0x12e>
 8000daa:	4a9d      	ldr	r2, [pc, #628]	; (8001020 <HAL_GPIO_Init+0x2d0>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d04c      	beq.n	8000e4a <HAL_GPIO_Init+0xfa>
 8000db0:	4a9b      	ldr	r2, [pc, #620]	; (8001020 <HAL_GPIO_Init+0x2d0>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d863      	bhi.n	8000e7e <HAL_GPIO_Init+0x12e>
 8000db6:	4a9b      	ldr	r2, [pc, #620]	; (8001024 <HAL_GPIO_Init+0x2d4>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d046      	beq.n	8000e4a <HAL_GPIO_Init+0xfa>
 8000dbc:	4a99      	ldr	r2, [pc, #612]	; (8001024 <HAL_GPIO_Init+0x2d4>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d85d      	bhi.n	8000e7e <HAL_GPIO_Init+0x12e>
 8000dc2:	2b12      	cmp	r3, #18
 8000dc4:	d82a      	bhi.n	8000e1c <HAL_GPIO_Init+0xcc>
 8000dc6:	2b12      	cmp	r3, #18
 8000dc8:	d859      	bhi.n	8000e7e <HAL_GPIO_Init+0x12e>
 8000dca:	a201      	add	r2, pc, #4	; (adr r2, 8000dd0 <HAL_GPIO_Init+0x80>)
 8000dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd0:	08000e4b 	.word	0x08000e4b
 8000dd4:	08000e25 	.word	0x08000e25
 8000dd8:	08000e37 	.word	0x08000e37
 8000ddc:	08000e79 	.word	0x08000e79
 8000de0:	08000e7f 	.word	0x08000e7f
 8000de4:	08000e7f 	.word	0x08000e7f
 8000de8:	08000e7f 	.word	0x08000e7f
 8000dec:	08000e7f 	.word	0x08000e7f
 8000df0:	08000e7f 	.word	0x08000e7f
 8000df4:	08000e7f 	.word	0x08000e7f
 8000df8:	08000e7f 	.word	0x08000e7f
 8000dfc:	08000e7f 	.word	0x08000e7f
 8000e00:	08000e7f 	.word	0x08000e7f
 8000e04:	08000e7f 	.word	0x08000e7f
 8000e08:	08000e7f 	.word	0x08000e7f
 8000e0c:	08000e7f 	.word	0x08000e7f
 8000e10:	08000e7f 	.word	0x08000e7f
 8000e14:	08000e2d 	.word	0x08000e2d
 8000e18:	08000e41 	.word	0x08000e41
 8000e1c:	4a82      	ldr	r2, [pc, #520]	; (8001028 <HAL_GPIO_Init+0x2d8>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d013      	beq.n	8000e4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e22:	e02c      	b.n	8000e7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	623b      	str	r3, [r7, #32]
          break;
 8000e2a:	e029      	b.n	8000e80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	3304      	adds	r3, #4
 8000e32:	623b      	str	r3, [r7, #32]
          break;
 8000e34:	e024      	b.n	8000e80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	3308      	adds	r3, #8
 8000e3c:	623b      	str	r3, [r7, #32]
          break;
 8000e3e:	e01f      	b.n	8000e80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	330c      	adds	r3, #12
 8000e46:	623b      	str	r3, [r7, #32]
          break;
 8000e48:	e01a      	b.n	8000e80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d102      	bne.n	8000e58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e52:	2304      	movs	r3, #4
 8000e54:	623b      	str	r3, [r7, #32]
          break;
 8000e56:	e013      	b.n	8000e80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d105      	bne.n	8000e6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e60:	2308      	movs	r3, #8
 8000e62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	69fa      	ldr	r2, [r7, #28]
 8000e68:	611a      	str	r2, [r3, #16]
          break;
 8000e6a:	e009      	b.n	8000e80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e6c:	2308      	movs	r3, #8
 8000e6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	69fa      	ldr	r2, [r7, #28]
 8000e74:	615a      	str	r2, [r3, #20]
          break;
 8000e76:	e003      	b.n	8000e80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	623b      	str	r3, [r7, #32]
          break;
 8000e7c:	e000      	b.n	8000e80 <HAL_GPIO_Init+0x130>
          break;
 8000e7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	2bff      	cmp	r3, #255	; 0xff
 8000e84:	d801      	bhi.n	8000e8a <HAL_GPIO_Init+0x13a>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	e001      	b.n	8000e8e <HAL_GPIO_Init+0x13e>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	2bff      	cmp	r3, #255	; 0xff
 8000e94:	d802      	bhi.n	8000e9c <HAL_GPIO_Init+0x14c>
 8000e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	e002      	b.n	8000ea2 <HAL_GPIO_Init+0x152>
 8000e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9e:	3b08      	subs	r3, #8
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	210f      	movs	r1, #15
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	6a39      	ldr	r1, [r7, #32]
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebc:	431a      	orrs	r2, r3
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	f000 8090 	beq.w	8000ff0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ed0:	4b56      	ldr	r3, [pc, #344]	; (800102c <HAL_GPIO_Init+0x2dc>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	4a55      	ldr	r2, [pc, #340]	; (800102c <HAL_GPIO_Init+0x2dc>)
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	6193      	str	r3, [r2, #24]
 8000edc:	4b53      	ldr	r3, [pc, #332]	; (800102c <HAL_GPIO_Init+0x2dc>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ee8:	4a51      	ldr	r2, [pc, #324]	; (8001030 <HAL_GPIO_Init+0x2e0>)
 8000eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eec:	089b      	lsrs	r3, r3, #2
 8000eee:	3302      	adds	r3, #2
 8000ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef8:	f003 0303 	and.w	r3, r3, #3
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	220f      	movs	r2, #15
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a49      	ldr	r2, [pc, #292]	; (8001034 <HAL_GPIO_Init+0x2e4>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d00d      	beq.n	8000f30 <HAL_GPIO_Init+0x1e0>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a48      	ldr	r2, [pc, #288]	; (8001038 <HAL_GPIO_Init+0x2e8>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d007      	beq.n	8000f2c <HAL_GPIO_Init+0x1dc>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a47      	ldr	r2, [pc, #284]	; (800103c <HAL_GPIO_Init+0x2ec>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d101      	bne.n	8000f28 <HAL_GPIO_Init+0x1d8>
 8000f24:	2302      	movs	r3, #2
 8000f26:	e004      	b.n	8000f32 <HAL_GPIO_Init+0x1e2>
 8000f28:	2303      	movs	r3, #3
 8000f2a:	e002      	b.n	8000f32 <HAL_GPIO_Init+0x1e2>
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e000      	b.n	8000f32 <HAL_GPIO_Init+0x1e2>
 8000f30:	2300      	movs	r3, #0
 8000f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f34:	f002 0203 	and.w	r2, r2, #3
 8000f38:	0092      	lsls	r2, r2, #2
 8000f3a:	4093      	lsls	r3, r2
 8000f3c:	68fa      	ldr	r2, [r7, #12]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f42:	493b      	ldr	r1, [pc, #236]	; (8001030 <HAL_GPIO_Init+0x2e0>)
 8000f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f46:	089b      	lsrs	r3, r3, #2
 8000f48:	3302      	adds	r3, #2
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d006      	beq.n	8000f6a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f5c:	4b38      	ldr	r3, [pc, #224]	; (8001040 <HAL_GPIO_Init+0x2f0>)
 8000f5e:	689a      	ldr	r2, [r3, #8]
 8000f60:	4937      	ldr	r1, [pc, #220]	; (8001040 <HAL_GPIO_Init+0x2f0>)
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	608b      	str	r3, [r1, #8]
 8000f68:	e006      	b.n	8000f78 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f6a:	4b35      	ldr	r3, [pc, #212]	; (8001040 <HAL_GPIO_Init+0x2f0>)
 8000f6c:	689a      	ldr	r2, [r3, #8]
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	43db      	mvns	r3, r3
 8000f72:	4933      	ldr	r1, [pc, #204]	; (8001040 <HAL_GPIO_Init+0x2f0>)
 8000f74:	4013      	ands	r3, r2
 8000f76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d006      	beq.n	8000f92 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f84:	4b2e      	ldr	r3, [pc, #184]	; (8001040 <HAL_GPIO_Init+0x2f0>)
 8000f86:	68da      	ldr	r2, [r3, #12]
 8000f88:	492d      	ldr	r1, [pc, #180]	; (8001040 <HAL_GPIO_Init+0x2f0>)
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	60cb      	str	r3, [r1, #12]
 8000f90:	e006      	b.n	8000fa0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f92:	4b2b      	ldr	r3, [pc, #172]	; (8001040 <HAL_GPIO_Init+0x2f0>)
 8000f94:	68da      	ldr	r2, [r3, #12]
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	4929      	ldr	r1, [pc, #164]	; (8001040 <HAL_GPIO_Init+0x2f0>)
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d006      	beq.n	8000fba <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fac:	4b24      	ldr	r3, [pc, #144]	; (8001040 <HAL_GPIO_Init+0x2f0>)
 8000fae:	685a      	ldr	r2, [r3, #4]
 8000fb0:	4923      	ldr	r1, [pc, #140]	; (8001040 <HAL_GPIO_Init+0x2f0>)
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	604b      	str	r3, [r1, #4]
 8000fb8:	e006      	b.n	8000fc8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fba:	4b21      	ldr	r3, [pc, #132]	; (8001040 <HAL_GPIO_Init+0x2f0>)
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	491f      	ldr	r1, [pc, #124]	; (8001040 <HAL_GPIO_Init+0x2f0>)
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d006      	beq.n	8000fe2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fd4:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <HAL_GPIO_Init+0x2f0>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4919      	ldr	r1, [pc, #100]	; (8001040 <HAL_GPIO_Init+0x2f0>)
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	600b      	str	r3, [r1, #0]
 8000fe0:	e006      	b.n	8000ff0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <HAL_GPIO_Init+0x2f0>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	4915      	ldr	r1, [pc, #84]	; (8001040 <HAL_GPIO_Init+0x2f0>)
 8000fec:	4013      	ands	r3, r2
 8000fee:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8001000:	2b00      	cmp	r3, #0
 8001002:	f47f aeaf 	bne.w	8000d64 <HAL_GPIO_Init+0x14>
  }
}
 8001006:	bf00      	nop
 8001008:	bf00      	nop
 800100a:	372c      	adds	r7, #44	; 0x2c
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	10320000 	.word	0x10320000
 8001018:	10310000 	.word	0x10310000
 800101c:	10220000 	.word	0x10220000
 8001020:	10210000 	.word	0x10210000
 8001024:	10120000 	.word	0x10120000
 8001028:	10110000 	.word	0x10110000
 800102c:	40021000 	.word	0x40021000
 8001030:	40010000 	.word	0x40010000
 8001034:	40010800 	.word	0x40010800
 8001038:	40010c00 	.word	0x40010c00
 800103c:	40011000 	.word	0x40011000
 8001040:	40010400 	.word	0x40010400

08001044 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	807b      	strh	r3, [r7, #2]
 8001050:	4613      	mov	r3, r2
 8001052:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001054:	787b      	ldrb	r3, [r7, #1]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800105a:	887a      	ldrh	r2, [r7, #2]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001060:	e003      	b.n	800106a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001062:	887b      	ldrh	r3, [r7, #2]
 8001064:	041a      	lsls	r2, r3, #16
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	611a      	str	r2, [r3, #16]
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr

08001074 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	460b      	mov	r3, r1
 800107e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001086:	887a      	ldrh	r2, [r7, #2]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4013      	ands	r3, r2
 800108c:	041a      	lsls	r2, r3, #16
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	43d9      	mvns	r1, r3
 8001092:	887b      	ldrh	r3, [r7, #2]
 8001094:	400b      	ands	r3, r1
 8001096:	431a      	orrs	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	611a      	str	r2, [r3, #16]
}
 800109c:	bf00      	nop
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr
	...

080010a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d101      	bne.n	80010ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e26c      	b.n	8001594 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	f000 8087 	beq.w	80011d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010c8:	4b92      	ldr	r3, [pc, #584]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 030c 	and.w	r3, r3, #12
 80010d0:	2b04      	cmp	r3, #4
 80010d2:	d00c      	beq.n	80010ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010d4:	4b8f      	ldr	r3, [pc, #572]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 030c 	and.w	r3, r3, #12
 80010dc:	2b08      	cmp	r3, #8
 80010de:	d112      	bne.n	8001106 <HAL_RCC_OscConfig+0x5e>
 80010e0:	4b8c      	ldr	r3, [pc, #560]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ec:	d10b      	bne.n	8001106 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ee:	4b89      	ldr	r3, [pc, #548]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d06c      	beq.n	80011d4 <HAL_RCC_OscConfig+0x12c>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d168      	bne.n	80011d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e246      	b.n	8001594 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800110e:	d106      	bne.n	800111e <HAL_RCC_OscConfig+0x76>
 8001110:	4b80      	ldr	r3, [pc, #512]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a7f      	ldr	r2, [pc, #508]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001116:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800111a:	6013      	str	r3, [r2, #0]
 800111c:	e02e      	b.n	800117c <HAL_RCC_OscConfig+0xd4>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d10c      	bne.n	8001140 <HAL_RCC_OscConfig+0x98>
 8001126:	4b7b      	ldr	r3, [pc, #492]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a7a      	ldr	r2, [pc, #488]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 800112c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	4b78      	ldr	r3, [pc, #480]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a77      	ldr	r2, [pc, #476]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001138:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	e01d      	b.n	800117c <HAL_RCC_OscConfig+0xd4>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001148:	d10c      	bne.n	8001164 <HAL_RCC_OscConfig+0xbc>
 800114a:	4b72      	ldr	r3, [pc, #456]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a71      	ldr	r2, [pc, #452]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001150:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	4b6f      	ldr	r3, [pc, #444]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a6e      	ldr	r2, [pc, #440]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 800115c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	e00b      	b.n	800117c <HAL_RCC_OscConfig+0xd4>
 8001164:	4b6b      	ldr	r3, [pc, #428]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a6a      	ldr	r2, [pc, #424]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 800116a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800116e:	6013      	str	r3, [r2, #0]
 8001170:	4b68      	ldr	r3, [pc, #416]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a67      	ldr	r2, [pc, #412]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800117a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d013      	beq.n	80011ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001184:	f7ff fccc 	bl	8000b20 <HAL_GetTick>
 8001188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800118a:	e008      	b.n	800119e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800118c:	f7ff fcc8 	bl	8000b20 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b64      	cmp	r3, #100	; 0x64
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e1fa      	b.n	8001594 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800119e:	4b5d      	ldr	r3, [pc, #372]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d0f0      	beq.n	800118c <HAL_RCC_OscConfig+0xe4>
 80011aa:	e014      	b.n	80011d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ac:	f7ff fcb8 	bl	8000b20 <HAL_GetTick>
 80011b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011b4:	f7ff fcb4 	bl	8000b20 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b64      	cmp	r3, #100	; 0x64
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e1e6      	b.n	8001594 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011c6:	4b53      	ldr	r3, [pc, #332]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1f0      	bne.n	80011b4 <HAL_RCC_OscConfig+0x10c>
 80011d2:	e000      	b.n	80011d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d063      	beq.n	80012aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011e2:	4b4c      	ldr	r3, [pc, #304]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 030c 	and.w	r3, r3, #12
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d00b      	beq.n	8001206 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011ee:	4b49      	ldr	r3, [pc, #292]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 030c 	and.w	r3, r3, #12
 80011f6:	2b08      	cmp	r3, #8
 80011f8:	d11c      	bne.n	8001234 <HAL_RCC_OscConfig+0x18c>
 80011fa:	4b46      	ldr	r3, [pc, #280]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d116      	bne.n	8001234 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001206:	4b43      	ldr	r3, [pc, #268]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d005      	beq.n	800121e <HAL_RCC_OscConfig+0x176>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	691b      	ldr	r3, [r3, #16]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d001      	beq.n	800121e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e1ba      	b.n	8001594 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800121e:	4b3d      	ldr	r3, [pc, #244]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	4939      	ldr	r1, [pc, #228]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 800122e:	4313      	orrs	r3, r2
 8001230:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001232:	e03a      	b.n	80012aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	691b      	ldr	r3, [r3, #16]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d020      	beq.n	800127e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800123c:	4b36      	ldr	r3, [pc, #216]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 800123e:	2201      	movs	r2, #1
 8001240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001242:	f7ff fc6d 	bl	8000b20 <HAL_GetTick>
 8001246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001248:	e008      	b.n	800125c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800124a:	f7ff fc69 	bl	8000b20 <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e19b      	b.n	8001594 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800125c:	4b2d      	ldr	r3, [pc, #180]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0f0      	beq.n	800124a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001268:	4b2a      	ldr	r3, [pc, #168]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	695b      	ldr	r3, [r3, #20]
 8001274:	00db      	lsls	r3, r3, #3
 8001276:	4927      	ldr	r1, [pc, #156]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 8001278:	4313      	orrs	r3, r2
 800127a:	600b      	str	r3, [r1, #0]
 800127c:	e015      	b.n	80012aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800127e:	4b26      	ldr	r3, [pc, #152]	; (8001318 <HAL_RCC_OscConfig+0x270>)
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001284:	f7ff fc4c 	bl	8000b20 <HAL_GetTick>
 8001288:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800128c:	f7ff fc48 	bl	8000b20 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b02      	cmp	r3, #2
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e17a      	b.n	8001594 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800129e:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1f0      	bne.n	800128c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0308 	and.w	r3, r3, #8
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d03a      	beq.n	800132c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d019      	beq.n	80012f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012be:	4b17      	ldr	r3, [pc, #92]	; (800131c <HAL_RCC_OscConfig+0x274>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c4:	f7ff fc2c 	bl	8000b20 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012cc:	f7ff fc28 	bl	8000b20 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e15a      	b.n	8001594 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012de:	4b0d      	ldr	r3, [pc, #52]	; (8001314 <HAL_RCC_OscConfig+0x26c>)
 80012e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0f0      	beq.n	80012cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012ea:	2001      	movs	r0, #1
 80012ec:	f000 fa9a 	bl	8001824 <RCC_Delay>
 80012f0:	e01c      	b.n	800132c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012f2:	4b0a      	ldr	r3, [pc, #40]	; (800131c <HAL_RCC_OscConfig+0x274>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012f8:	f7ff fc12 	bl	8000b20 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012fe:	e00f      	b.n	8001320 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001300:	f7ff fc0e 	bl	8000b20 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d908      	bls.n	8001320 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e140      	b.n	8001594 <HAL_RCC_OscConfig+0x4ec>
 8001312:	bf00      	nop
 8001314:	40021000 	.word	0x40021000
 8001318:	42420000 	.word	0x42420000
 800131c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001320:	4b9e      	ldr	r3, [pc, #632]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 8001322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1e9      	bne.n	8001300 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	2b00      	cmp	r3, #0
 8001336:	f000 80a6 	beq.w	8001486 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800133a:	2300      	movs	r3, #0
 800133c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800133e:	4b97      	ldr	r3, [pc, #604]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d10d      	bne.n	8001366 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800134a:	4b94      	ldr	r3, [pc, #592]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	4a93      	ldr	r2, [pc, #588]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 8001350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001354:	61d3      	str	r3, [r2, #28]
 8001356:	4b91      	ldr	r3, [pc, #580]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001362:	2301      	movs	r3, #1
 8001364:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001366:	4b8e      	ldr	r3, [pc, #568]	; (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800136e:	2b00      	cmp	r3, #0
 8001370:	d118      	bne.n	80013a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001372:	4b8b      	ldr	r3, [pc, #556]	; (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a8a      	ldr	r2, [pc, #552]	; (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 8001378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800137c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800137e:	f7ff fbcf 	bl	8000b20 <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001386:	f7ff fbcb 	bl	8000b20 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b64      	cmp	r3, #100	; 0x64
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e0fd      	b.n	8001594 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001398:	4b81      	ldr	r3, [pc, #516]	; (80015a0 <HAL_RCC_OscConfig+0x4f8>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0f0      	beq.n	8001386 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d106      	bne.n	80013ba <HAL_RCC_OscConfig+0x312>
 80013ac:	4b7b      	ldr	r3, [pc, #492]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	4a7a      	ldr	r2, [pc, #488]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 80013b2:	f043 0301 	orr.w	r3, r3, #1
 80013b6:	6213      	str	r3, [r2, #32]
 80013b8:	e02d      	b.n	8001416 <HAL_RCC_OscConfig+0x36e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10c      	bne.n	80013dc <HAL_RCC_OscConfig+0x334>
 80013c2:	4b76      	ldr	r3, [pc, #472]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 80013c4:	6a1b      	ldr	r3, [r3, #32]
 80013c6:	4a75      	ldr	r2, [pc, #468]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 80013c8:	f023 0301 	bic.w	r3, r3, #1
 80013cc:	6213      	str	r3, [r2, #32]
 80013ce:	4b73      	ldr	r3, [pc, #460]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 80013d0:	6a1b      	ldr	r3, [r3, #32]
 80013d2:	4a72      	ldr	r2, [pc, #456]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 80013d4:	f023 0304 	bic.w	r3, r3, #4
 80013d8:	6213      	str	r3, [r2, #32]
 80013da:	e01c      	b.n	8001416 <HAL_RCC_OscConfig+0x36e>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	2b05      	cmp	r3, #5
 80013e2:	d10c      	bne.n	80013fe <HAL_RCC_OscConfig+0x356>
 80013e4:	4b6d      	ldr	r3, [pc, #436]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 80013e6:	6a1b      	ldr	r3, [r3, #32]
 80013e8:	4a6c      	ldr	r2, [pc, #432]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 80013ea:	f043 0304 	orr.w	r3, r3, #4
 80013ee:	6213      	str	r3, [r2, #32]
 80013f0:	4b6a      	ldr	r3, [pc, #424]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 80013f2:	6a1b      	ldr	r3, [r3, #32]
 80013f4:	4a69      	ldr	r2, [pc, #420]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	6213      	str	r3, [r2, #32]
 80013fc:	e00b      	b.n	8001416 <HAL_RCC_OscConfig+0x36e>
 80013fe:	4b67      	ldr	r3, [pc, #412]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	4a66      	ldr	r2, [pc, #408]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 8001404:	f023 0301 	bic.w	r3, r3, #1
 8001408:	6213      	str	r3, [r2, #32]
 800140a:	4b64      	ldr	r3, [pc, #400]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 800140c:	6a1b      	ldr	r3, [r3, #32]
 800140e:	4a63      	ldr	r2, [pc, #396]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 8001410:	f023 0304 	bic.w	r3, r3, #4
 8001414:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d015      	beq.n	800144a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141e:	f7ff fb7f 	bl	8000b20 <HAL_GetTick>
 8001422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001424:	e00a      	b.n	800143c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001426:	f7ff fb7b 	bl	8000b20 <HAL_GetTick>
 800142a:	4602      	mov	r2, r0
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	1ad3      	subs	r3, r2, r3
 8001430:	f241 3288 	movw	r2, #5000	; 0x1388
 8001434:	4293      	cmp	r3, r2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e0ab      	b.n	8001594 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800143c:	4b57      	ldr	r3, [pc, #348]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d0ee      	beq.n	8001426 <HAL_RCC_OscConfig+0x37e>
 8001448:	e014      	b.n	8001474 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144a:	f7ff fb69 	bl	8000b20 <HAL_GetTick>
 800144e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001450:	e00a      	b.n	8001468 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001452:	f7ff fb65 	bl	8000b20 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001460:	4293      	cmp	r3, r2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e095      	b.n	8001594 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001468:	4b4c      	ldr	r3, [pc, #304]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d1ee      	bne.n	8001452 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001474:	7dfb      	ldrb	r3, [r7, #23]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d105      	bne.n	8001486 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800147a:	4b48      	ldr	r3, [pc, #288]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	4a47      	ldr	r2, [pc, #284]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 8001480:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001484:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	2b00      	cmp	r3, #0
 800148c:	f000 8081 	beq.w	8001592 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001490:	4b42      	ldr	r3, [pc, #264]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 030c 	and.w	r3, r3, #12
 8001498:	2b08      	cmp	r3, #8
 800149a:	d061      	beq.n	8001560 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	69db      	ldr	r3, [r3, #28]
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d146      	bne.n	8001532 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a4:	4b3f      	ldr	r3, [pc, #252]	; (80015a4 <HAL_RCC_OscConfig+0x4fc>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014aa:	f7ff fb39 	bl	8000b20 <HAL_GetTick>
 80014ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b2:	f7ff fb35 	bl	8000b20 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e067      	b.n	8001594 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014c4:	4b35      	ldr	r3, [pc, #212]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d1f0      	bne.n	80014b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d8:	d108      	bne.n	80014ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014da:	4b30      	ldr	r3, [pc, #192]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	492d      	ldr	r1, [pc, #180]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 80014e8:	4313      	orrs	r3, r2
 80014ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014ec:	4b2b      	ldr	r3, [pc, #172]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a19      	ldr	r1, [r3, #32]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fc:	430b      	orrs	r3, r1
 80014fe:	4927      	ldr	r1, [pc, #156]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 8001500:	4313      	orrs	r3, r2
 8001502:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001504:	4b27      	ldr	r3, [pc, #156]	; (80015a4 <HAL_RCC_OscConfig+0x4fc>)
 8001506:	2201      	movs	r2, #1
 8001508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150a:	f7ff fb09 	bl	8000b20 <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001510:	e008      	b.n	8001524 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001512:	f7ff fb05 	bl	8000b20 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e037      	b.n	8001594 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001524:	4b1d      	ldr	r3, [pc, #116]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0f0      	beq.n	8001512 <HAL_RCC_OscConfig+0x46a>
 8001530:	e02f      	b.n	8001592 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001532:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <HAL_RCC_OscConfig+0x4fc>)
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001538:	f7ff faf2 	bl	8000b20 <HAL_GetTick>
 800153c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800153e:	e008      	b.n	8001552 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001540:	f7ff faee 	bl	8000b20 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	2b02      	cmp	r3, #2
 800154c:	d901      	bls.n	8001552 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e020      	b.n	8001594 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001552:	4b12      	ldr	r3, [pc, #72]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f0      	bne.n	8001540 <HAL_RCC_OscConfig+0x498>
 800155e:	e018      	b.n	8001592 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	69db      	ldr	r3, [r3, #28]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d101      	bne.n	800156c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e013      	b.n	8001594 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800156c:	4b0b      	ldr	r3, [pc, #44]	; (800159c <HAL_RCC_OscConfig+0x4f4>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	429a      	cmp	r2, r3
 800157e:	d106      	bne.n	800158e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800158a:	429a      	cmp	r2, r3
 800158c:	d001      	beq.n	8001592 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e000      	b.n	8001594 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	3718      	adds	r7, #24
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40021000 	.word	0x40021000
 80015a0:	40007000 	.word	0x40007000
 80015a4:	42420060 	.word	0x42420060

080015a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e0d0      	b.n	800175e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015bc:	4b6a      	ldr	r3, [pc, #424]	; (8001768 <HAL_RCC_ClockConfig+0x1c0>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0307 	and.w	r3, r3, #7
 80015c4:	683a      	ldr	r2, [r7, #0]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d910      	bls.n	80015ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ca:	4b67      	ldr	r3, [pc, #412]	; (8001768 <HAL_RCC_ClockConfig+0x1c0>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f023 0207 	bic.w	r2, r3, #7
 80015d2:	4965      	ldr	r1, [pc, #404]	; (8001768 <HAL_RCC_ClockConfig+0x1c0>)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015da:	4b63      	ldr	r3, [pc, #396]	; (8001768 <HAL_RCC_ClockConfig+0x1c0>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d001      	beq.n	80015ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e0b8      	b.n	800175e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d020      	beq.n	800163a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	2b00      	cmp	r3, #0
 8001602:	d005      	beq.n	8001610 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001604:	4b59      	ldr	r3, [pc, #356]	; (800176c <HAL_RCC_ClockConfig+0x1c4>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	4a58      	ldr	r2, [pc, #352]	; (800176c <HAL_RCC_ClockConfig+0x1c4>)
 800160a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800160e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0308 	and.w	r3, r3, #8
 8001618:	2b00      	cmp	r3, #0
 800161a:	d005      	beq.n	8001628 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800161c:	4b53      	ldr	r3, [pc, #332]	; (800176c <HAL_RCC_ClockConfig+0x1c4>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	4a52      	ldr	r2, [pc, #328]	; (800176c <HAL_RCC_ClockConfig+0x1c4>)
 8001622:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001626:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001628:	4b50      	ldr	r3, [pc, #320]	; (800176c <HAL_RCC_ClockConfig+0x1c4>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	494d      	ldr	r1, [pc, #308]	; (800176c <HAL_RCC_ClockConfig+0x1c4>)
 8001636:	4313      	orrs	r3, r2
 8001638:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b00      	cmp	r3, #0
 8001644:	d040      	beq.n	80016c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d107      	bne.n	800165e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164e:	4b47      	ldr	r3, [pc, #284]	; (800176c <HAL_RCC_ClockConfig+0x1c4>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d115      	bne.n	8001686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e07f      	b.n	800175e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b02      	cmp	r3, #2
 8001664:	d107      	bne.n	8001676 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001666:	4b41      	ldr	r3, [pc, #260]	; (800176c <HAL_RCC_ClockConfig+0x1c4>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d109      	bne.n	8001686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e073      	b.n	800175e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001676:	4b3d      	ldr	r3, [pc, #244]	; (800176c <HAL_RCC_ClockConfig+0x1c4>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e06b      	b.n	800175e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001686:	4b39      	ldr	r3, [pc, #228]	; (800176c <HAL_RCC_ClockConfig+0x1c4>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f023 0203 	bic.w	r2, r3, #3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	4936      	ldr	r1, [pc, #216]	; (800176c <HAL_RCC_ClockConfig+0x1c4>)
 8001694:	4313      	orrs	r3, r2
 8001696:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001698:	f7ff fa42 	bl	8000b20 <HAL_GetTick>
 800169c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800169e:	e00a      	b.n	80016b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a0:	f7ff fa3e 	bl	8000b20 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e053      	b.n	800175e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016b6:	4b2d      	ldr	r3, [pc, #180]	; (800176c <HAL_RCC_ClockConfig+0x1c4>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 020c 	and.w	r2, r3, #12
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d1eb      	bne.n	80016a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016c8:	4b27      	ldr	r3, [pc, #156]	; (8001768 <HAL_RCC_ClockConfig+0x1c0>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0307 	and.w	r3, r3, #7
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d210      	bcs.n	80016f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016d6:	4b24      	ldr	r3, [pc, #144]	; (8001768 <HAL_RCC_ClockConfig+0x1c0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f023 0207 	bic.w	r2, r3, #7
 80016de:	4922      	ldr	r1, [pc, #136]	; (8001768 <HAL_RCC_ClockConfig+0x1c0>)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e6:	4b20      	ldr	r3, [pc, #128]	; (8001768 <HAL_RCC_ClockConfig+0x1c0>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d001      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e032      	b.n	800175e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0304 	and.w	r3, r3, #4
 8001700:	2b00      	cmp	r3, #0
 8001702:	d008      	beq.n	8001716 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001704:	4b19      	ldr	r3, [pc, #100]	; (800176c <HAL_RCC_ClockConfig+0x1c4>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	4916      	ldr	r1, [pc, #88]	; (800176c <HAL_RCC_ClockConfig+0x1c4>)
 8001712:	4313      	orrs	r3, r2
 8001714:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0308 	and.w	r3, r3, #8
 800171e:	2b00      	cmp	r3, #0
 8001720:	d009      	beq.n	8001736 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001722:	4b12      	ldr	r3, [pc, #72]	; (800176c <HAL_RCC_ClockConfig+0x1c4>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	490e      	ldr	r1, [pc, #56]	; (800176c <HAL_RCC_ClockConfig+0x1c4>)
 8001732:	4313      	orrs	r3, r2
 8001734:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001736:	f000 f821 	bl	800177c <HAL_RCC_GetSysClockFreq>
 800173a:	4602      	mov	r2, r0
 800173c:	4b0b      	ldr	r3, [pc, #44]	; (800176c <HAL_RCC_ClockConfig+0x1c4>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	091b      	lsrs	r3, r3, #4
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	490a      	ldr	r1, [pc, #40]	; (8001770 <HAL_RCC_ClockConfig+0x1c8>)
 8001748:	5ccb      	ldrb	r3, [r1, r3]
 800174a:	fa22 f303 	lsr.w	r3, r2, r3
 800174e:	4a09      	ldr	r2, [pc, #36]	; (8001774 <HAL_RCC_ClockConfig+0x1cc>)
 8001750:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001752:	4b09      	ldr	r3, [pc, #36]	; (8001778 <HAL_RCC_ClockConfig+0x1d0>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff f9a0 	bl	8000a9c <HAL_InitTick>

  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40022000 	.word	0x40022000
 800176c:	40021000 	.word	0x40021000
 8001770:	08002fa8 	.word	0x08002fa8
 8001774:	20000000 	.word	0x20000000
 8001778:	20000004 	.word	0x20000004

0800177c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800177c:	b480      	push	{r7}
 800177e:	b087      	sub	sp, #28
 8001780:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	2300      	movs	r3, #0
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]
 800178e:	2300      	movs	r3, #0
 8001790:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001792:	2300      	movs	r3, #0
 8001794:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001796:	4b1e      	ldr	r3, [pc, #120]	; (8001810 <HAL_RCC_GetSysClockFreq+0x94>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f003 030c 	and.w	r3, r3, #12
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	d002      	beq.n	80017ac <HAL_RCC_GetSysClockFreq+0x30>
 80017a6:	2b08      	cmp	r3, #8
 80017a8:	d003      	beq.n	80017b2 <HAL_RCC_GetSysClockFreq+0x36>
 80017aa:	e027      	b.n	80017fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017ac:	4b19      	ldr	r3, [pc, #100]	; (8001814 <HAL_RCC_GetSysClockFreq+0x98>)
 80017ae:	613b      	str	r3, [r7, #16]
      break;
 80017b0:	e027      	b.n	8001802 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	0c9b      	lsrs	r3, r3, #18
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	4a17      	ldr	r2, [pc, #92]	; (8001818 <HAL_RCC_GetSysClockFreq+0x9c>)
 80017bc:	5cd3      	ldrb	r3, [r2, r3]
 80017be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d010      	beq.n	80017ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <HAL_RCC_GetSysClockFreq+0x94>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	0c5b      	lsrs	r3, r3, #17
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	4a11      	ldr	r2, [pc, #68]	; (800181c <HAL_RCC_GetSysClockFreq+0xa0>)
 80017d6:	5cd3      	ldrb	r3, [r2, r3]
 80017d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a0d      	ldr	r2, [pc, #52]	; (8001814 <HAL_RCC_GetSysClockFreq+0x98>)
 80017de:	fb02 f203 	mul.w	r2, r2, r3
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e8:	617b      	str	r3, [r7, #20]
 80017ea:	e004      	b.n	80017f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a0c      	ldr	r2, [pc, #48]	; (8001820 <HAL_RCC_GetSysClockFreq+0xa4>)
 80017f0:	fb02 f303 	mul.w	r3, r2, r3
 80017f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	613b      	str	r3, [r7, #16]
      break;
 80017fa:	e002      	b.n	8001802 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017fc:	4b05      	ldr	r3, [pc, #20]	; (8001814 <HAL_RCC_GetSysClockFreq+0x98>)
 80017fe:	613b      	str	r3, [r7, #16]
      break;
 8001800:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001802:	693b      	ldr	r3, [r7, #16]
}
 8001804:	4618      	mov	r0, r3
 8001806:	371c      	adds	r7, #28
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	40021000 	.word	0x40021000
 8001814:	007a1200 	.word	0x007a1200
 8001818:	08002fb8 	.word	0x08002fb8
 800181c:	08002fc8 	.word	0x08002fc8
 8001820:	003d0900 	.word	0x003d0900

08001824 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800182c:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <RCC_Delay+0x34>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a0a      	ldr	r2, [pc, #40]	; (800185c <RCC_Delay+0x38>)
 8001832:	fba2 2303 	umull	r2, r3, r2, r3
 8001836:	0a5b      	lsrs	r3, r3, #9
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	fb02 f303 	mul.w	r3, r2, r3
 800183e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001840:	bf00      	nop
  }
  while (Delay --);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	1e5a      	subs	r2, r3, #1
 8001846:	60fa      	str	r2, [r7, #12]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1f9      	bne.n	8001840 <RCC_Delay+0x1c>
}
 800184c:	bf00      	nop
 800184e:	bf00      	nop
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr
 8001858:	20000000 	.word	0x20000000
 800185c:	10624dd3 	.word	0x10624dd3

08001860 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e041      	b.n	80018f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d106      	bne.n	800188c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7fe ffd0 	bl	800082c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2202      	movs	r2, #2
 8001890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3304      	adds	r3, #4
 800189c:	4619      	mov	r1, r3
 800189e:	4610      	mov	r0, r2
 80018a0:	f000 fa6e 	bl	8001d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2201      	movs	r2, #1
 80018c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2201      	movs	r2, #1
 80018f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800190e:	b2db      	uxtb	r3, r3
 8001910:	2b01      	cmp	r3, #1
 8001912:	d001      	beq.n	8001918 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e035      	b.n	8001984 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2202      	movs	r2, #2
 800191c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	68da      	ldr	r2, [r3, #12]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f042 0201 	orr.w	r2, r2, #1
 800192e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a16      	ldr	r2, [pc, #88]	; (8001990 <HAL_TIM_Base_Start_IT+0x90>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d009      	beq.n	800194e <HAL_TIM_Base_Start_IT+0x4e>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001942:	d004      	beq.n	800194e <HAL_TIM_Base_Start_IT+0x4e>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a12      	ldr	r2, [pc, #72]	; (8001994 <HAL_TIM_Base_Start_IT+0x94>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d111      	bne.n	8001972 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 0307 	and.w	r3, r3, #7
 8001958:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2b06      	cmp	r3, #6
 800195e:	d010      	beq.n	8001982 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f042 0201 	orr.w	r2, r2, #1
 800196e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001970:	e007      	b.n	8001982 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f042 0201 	orr.w	r2, r2, #1
 8001980:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	3714      	adds	r7, #20
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	40012c00 	.word	0x40012c00
 8001994:	40000400 	.word	0x40000400

08001998 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d122      	bne.n	80019f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d11b      	bne.n	80019f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f06f 0202 	mvn.w	r2, #2
 80019c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 f9b4 	bl	8001d48 <HAL_TIM_IC_CaptureCallback>
 80019e0:	e005      	b.n	80019ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f9a7 	bl	8001d36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 f9b6 	bl	8001d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	f003 0304 	and.w	r3, r3, #4
 80019fe:	2b04      	cmp	r3, #4
 8001a00:	d122      	bne.n	8001a48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	2b04      	cmp	r3, #4
 8001a0e:	d11b      	bne.n	8001a48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f06f 0204 	mvn.w	r2, #4
 8001a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 f98a 	bl	8001d48 <HAL_TIM_IC_CaptureCallback>
 8001a34:	e005      	b.n	8001a42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 f97d 	bl	8001d36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 f98c 	bl	8001d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	f003 0308 	and.w	r3, r3, #8
 8001a52:	2b08      	cmp	r3, #8
 8001a54:	d122      	bne.n	8001a9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	f003 0308 	and.w	r3, r3, #8
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d11b      	bne.n	8001a9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f06f 0208 	mvn.w	r2, #8
 8001a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2204      	movs	r2, #4
 8001a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 f960 	bl	8001d48 <HAL_TIM_IC_CaptureCallback>
 8001a88:	e005      	b.n	8001a96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 f953 	bl	8001d36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 f962 	bl	8001d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	f003 0310 	and.w	r3, r3, #16
 8001aa6:	2b10      	cmp	r3, #16
 8001aa8:	d122      	bne.n	8001af0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	f003 0310 	and.w	r3, r3, #16
 8001ab4:	2b10      	cmp	r3, #16
 8001ab6:	d11b      	bne.n	8001af0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f06f 0210 	mvn.w	r2, #16
 8001ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2208      	movs	r2, #8
 8001ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 f936 	bl	8001d48 <HAL_TIM_IC_CaptureCallback>
 8001adc:	e005      	b.n	8001aea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 f929 	bl	8001d36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 f938 	bl	8001d5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d10e      	bne.n	8001b1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d107      	bne.n	8001b1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f06f 0201 	mvn.w	r2, #1
 8001b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7fe fe3a 	bl	8000790 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b26:	2b80      	cmp	r3, #128	; 0x80
 8001b28:	d10e      	bne.n	8001b48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b34:	2b80      	cmp	r3, #128	; 0x80
 8001b36:	d107      	bne.n	8001b48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 fa6b 	bl	800201e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b52:	2b40      	cmp	r3, #64	; 0x40
 8001b54:	d10e      	bne.n	8001b74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b60:	2b40      	cmp	r3, #64	; 0x40
 8001b62:	d107      	bne.n	8001b74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f8fc 	bl	8001d6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	f003 0320 	and.w	r3, r3, #32
 8001b7e:	2b20      	cmp	r3, #32
 8001b80:	d10e      	bne.n	8001ba0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	f003 0320 	and.w	r3, r3, #32
 8001b8c:	2b20      	cmp	r3, #32
 8001b8e:	d107      	bne.n	8001ba0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f06f 0220 	mvn.w	r2, #32
 8001b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 fa36 	bl	800200c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ba0:	bf00      	nop
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d101      	bne.n	8001bc4 <HAL_TIM_ConfigClockSource+0x1c>
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	e0b4      	b.n	8001d2e <HAL_TIM_ConfigClockSource+0x186>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2202      	movs	r2, #2
 8001bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001be2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001bea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68ba      	ldr	r2, [r7, #8]
 8001bf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bfc:	d03e      	beq.n	8001c7c <HAL_TIM_ConfigClockSource+0xd4>
 8001bfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c02:	f200 8087 	bhi.w	8001d14 <HAL_TIM_ConfigClockSource+0x16c>
 8001c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c0a:	f000 8086 	beq.w	8001d1a <HAL_TIM_ConfigClockSource+0x172>
 8001c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c12:	d87f      	bhi.n	8001d14 <HAL_TIM_ConfigClockSource+0x16c>
 8001c14:	2b70      	cmp	r3, #112	; 0x70
 8001c16:	d01a      	beq.n	8001c4e <HAL_TIM_ConfigClockSource+0xa6>
 8001c18:	2b70      	cmp	r3, #112	; 0x70
 8001c1a:	d87b      	bhi.n	8001d14 <HAL_TIM_ConfigClockSource+0x16c>
 8001c1c:	2b60      	cmp	r3, #96	; 0x60
 8001c1e:	d050      	beq.n	8001cc2 <HAL_TIM_ConfigClockSource+0x11a>
 8001c20:	2b60      	cmp	r3, #96	; 0x60
 8001c22:	d877      	bhi.n	8001d14 <HAL_TIM_ConfigClockSource+0x16c>
 8001c24:	2b50      	cmp	r3, #80	; 0x50
 8001c26:	d03c      	beq.n	8001ca2 <HAL_TIM_ConfigClockSource+0xfa>
 8001c28:	2b50      	cmp	r3, #80	; 0x50
 8001c2a:	d873      	bhi.n	8001d14 <HAL_TIM_ConfigClockSource+0x16c>
 8001c2c:	2b40      	cmp	r3, #64	; 0x40
 8001c2e:	d058      	beq.n	8001ce2 <HAL_TIM_ConfigClockSource+0x13a>
 8001c30:	2b40      	cmp	r3, #64	; 0x40
 8001c32:	d86f      	bhi.n	8001d14 <HAL_TIM_ConfigClockSource+0x16c>
 8001c34:	2b30      	cmp	r3, #48	; 0x30
 8001c36:	d064      	beq.n	8001d02 <HAL_TIM_ConfigClockSource+0x15a>
 8001c38:	2b30      	cmp	r3, #48	; 0x30
 8001c3a:	d86b      	bhi.n	8001d14 <HAL_TIM_ConfigClockSource+0x16c>
 8001c3c:	2b20      	cmp	r3, #32
 8001c3e:	d060      	beq.n	8001d02 <HAL_TIM_ConfigClockSource+0x15a>
 8001c40:	2b20      	cmp	r3, #32
 8001c42:	d867      	bhi.n	8001d14 <HAL_TIM_ConfigClockSource+0x16c>
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d05c      	beq.n	8001d02 <HAL_TIM_ConfigClockSource+0x15a>
 8001c48:	2b10      	cmp	r3, #16
 8001c4a:	d05a      	beq.n	8001d02 <HAL_TIM_ConfigClockSource+0x15a>
 8001c4c:	e062      	b.n	8001d14 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6818      	ldr	r0, [r3, #0]
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	6899      	ldr	r1, [r3, #8]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	f000 f95e 	bl	8001f1e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001c70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	609a      	str	r2, [r3, #8]
      break;
 8001c7a:	e04f      	b.n	8001d1c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6818      	ldr	r0, [r3, #0]
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	6899      	ldr	r1, [r3, #8]
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	f000 f947 	bl	8001f1e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	689a      	ldr	r2, [r3, #8]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c9e:	609a      	str	r2, [r3, #8]
      break;
 8001ca0:	e03c      	b.n	8001d1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6818      	ldr	r0, [r3, #0]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	6859      	ldr	r1, [r3, #4]
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	f000 f8be 	bl	8001e30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2150      	movs	r1, #80	; 0x50
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f000 f915 	bl	8001eea <TIM_ITRx_SetConfig>
      break;
 8001cc0:	e02c      	b.n	8001d1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6818      	ldr	r0, [r3, #0]
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	6859      	ldr	r1, [r3, #4]
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	f000 f8dc 	bl	8001e8c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2160      	movs	r1, #96	; 0x60
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f000 f905 	bl	8001eea <TIM_ITRx_SetConfig>
      break;
 8001ce0:	e01c      	b.n	8001d1c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6818      	ldr	r0, [r3, #0]
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	6859      	ldr	r1, [r3, #4]
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	f000 f89e 	bl	8001e30 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2140      	movs	r1, #64	; 0x40
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 f8f5 	bl	8001eea <TIM_ITRx_SetConfig>
      break;
 8001d00:	e00c      	b.n	8001d1c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4610      	mov	r0, r2
 8001d0e:	f000 f8ec 	bl	8001eea <TIM_ITRx_SetConfig>
      break;
 8001d12:	e003      	b.n	8001d1c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	73fb      	strb	r3, [r7, #15]
      break;
 8001d18:	e000      	b.n	8001d1c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001d1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr

08001d48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr

08001d5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr

08001d6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr
	...

08001d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a25      	ldr	r2, [pc, #148]	; (8001e28 <TIM_Base_SetConfig+0xa8>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d007      	beq.n	8001da8 <TIM_Base_SetConfig+0x28>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d9e:	d003      	beq.n	8001da8 <TIM_Base_SetConfig+0x28>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a22      	ldr	r2, [pc, #136]	; (8001e2c <TIM_Base_SetConfig+0xac>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d108      	bne.n	8001dba <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a1a      	ldr	r2, [pc, #104]	; (8001e28 <TIM_Base_SetConfig+0xa8>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d007      	beq.n	8001dd2 <TIM_Base_SetConfig+0x52>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dc8:	d003      	beq.n	8001dd2 <TIM_Base_SetConfig+0x52>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a17      	ldr	r2, [pc, #92]	; (8001e2c <TIM_Base_SetConfig+0xac>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d108      	bne.n	8001de4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	68fa      	ldr	r2, [r7, #12]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a07      	ldr	r2, [pc, #28]	; (8001e28 <TIM_Base_SetConfig+0xa8>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d103      	bne.n	8001e18 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	691a      	ldr	r2, [r3, #16]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	615a      	str	r2, [r3, #20]
}
 8001e1e:	bf00      	nop
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr
 8001e28:	40012c00 	.word	0x40012c00
 8001e2c:	40000400 	.word	0x40000400

08001e30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b087      	sub	sp, #28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6a1b      	ldr	r3, [r3, #32]
 8001e46:	f023 0201 	bic.w	r2, r3, #1
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	011b      	lsls	r3, r3, #4
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f023 030a 	bic.w	r3, r3, #10
 8001e6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	697a      	ldr	r2, [r7, #20]
 8001e80:	621a      	str	r2, [r3, #32]
}
 8001e82:	bf00      	nop
 8001e84:	371c      	adds	r7, #28
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr

08001e8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b087      	sub	sp, #28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	f023 0210 	bic.w	r2, r3, #16
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001eb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	031b      	lsls	r3, r3, #12
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001ec8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	011b      	lsls	r3, r3, #4
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	621a      	str	r2, [r3, #32]
}
 8001ee0:	bf00      	nop
 8001ee2:	371c      	adds	r7, #28
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bc80      	pop	{r7}
 8001ee8:	4770      	bx	lr

08001eea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b085      	sub	sp, #20
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
 8001ef2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	f043 0307 	orr.w	r3, r3, #7
 8001f0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	609a      	str	r2, [r3, #8]
}
 8001f14:	bf00      	nop
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bc80      	pop	{r7}
 8001f1c:	4770      	bx	lr

08001f1e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b087      	sub	sp, #28
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	60f8      	str	r0, [r7, #12]
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
 8001f2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f38:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	021a      	lsls	r2, r3, #8
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	431a      	orrs	r2, r3
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	609a      	str	r2, [r3, #8]
}
 8001f52:	bf00      	nop
 8001f54:	371c      	adds	r7, #28
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr

08001f5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d101      	bne.n	8001f74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001f70:	2302      	movs	r3, #2
 8001f72:	e041      	b.n	8001ff8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2202      	movs	r2, #2
 8001f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68fa      	ldr	r2, [r7, #12]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a14      	ldr	r2, [pc, #80]	; (8002004 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d009      	beq.n	8001fcc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fc0:	d004      	beq.n	8001fcc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a10      	ldr	r2, [pc, #64]	; (8002008 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d10c      	bne.n	8001fe6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fd2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	68ba      	ldr	r2, [r7, #8]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68ba      	ldr	r2, [r7, #8]
 8001fe4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40012c00 	.word	0x40012c00
 8002008:	40000400 	.word	0x40000400

0800200c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr

0800201e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr

08002030 <__errno>:
 8002030:	4b01      	ldr	r3, [pc, #4]	; (8002038 <__errno+0x8>)
 8002032:	6818      	ldr	r0, [r3, #0]
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	2000000c 	.word	0x2000000c

0800203c <__libc_init_array>:
 800203c:	b570      	push	{r4, r5, r6, lr}
 800203e:	2600      	movs	r6, #0
 8002040:	4d0c      	ldr	r5, [pc, #48]	; (8002074 <__libc_init_array+0x38>)
 8002042:	4c0d      	ldr	r4, [pc, #52]	; (8002078 <__libc_init_array+0x3c>)
 8002044:	1b64      	subs	r4, r4, r5
 8002046:	10a4      	asrs	r4, r4, #2
 8002048:	42a6      	cmp	r6, r4
 800204a:	d109      	bne.n	8002060 <__libc_init_array+0x24>
 800204c:	f000 ff82 	bl	8002f54 <_init>
 8002050:	2600      	movs	r6, #0
 8002052:	4d0a      	ldr	r5, [pc, #40]	; (800207c <__libc_init_array+0x40>)
 8002054:	4c0a      	ldr	r4, [pc, #40]	; (8002080 <__libc_init_array+0x44>)
 8002056:	1b64      	subs	r4, r4, r5
 8002058:	10a4      	asrs	r4, r4, #2
 800205a:	42a6      	cmp	r6, r4
 800205c:	d105      	bne.n	800206a <__libc_init_array+0x2e>
 800205e:	bd70      	pop	{r4, r5, r6, pc}
 8002060:	f855 3b04 	ldr.w	r3, [r5], #4
 8002064:	4798      	blx	r3
 8002066:	3601      	adds	r6, #1
 8002068:	e7ee      	b.n	8002048 <__libc_init_array+0xc>
 800206a:	f855 3b04 	ldr.w	r3, [r5], #4
 800206e:	4798      	blx	r3
 8002070:	3601      	adds	r6, #1
 8002072:	e7f2      	b.n	800205a <__libc_init_array+0x1e>
 8002074:	08003064 	.word	0x08003064
 8002078:	08003064 	.word	0x08003064
 800207c:	08003064 	.word	0x08003064
 8002080:	08003068 	.word	0x08003068

08002084 <memset>:
 8002084:	4603      	mov	r3, r0
 8002086:	4402      	add	r2, r0
 8002088:	4293      	cmp	r3, r2
 800208a:	d100      	bne.n	800208e <memset+0xa>
 800208c:	4770      	bx	lr
 800208e:	f803 1b01 	strb.w	r1, [r3], #1
 8002092:	e7f9      	b.n	8002088 <memset+0x4>

08002094 <iprintf>:
 8002094:	b40f      	push	{r0, r1, r2, r3}
 8002096:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <iprintf+0x2c>)
 8002098:	b513      	push	{r0, r1, r4, lr}
 800209a:	681c      	ldr	r4, [r3, #0]
 800209c:	b124      	cbz	r4, 80020a8 <iprintf+0x14>
 800209e:	69a3      	ldr	r3, [r4, #24]
 80020a0:	b913      	cbnz	r3, 80020a8 <iprintf+0x14>
 80020a2:	4620      	mov	r0, r4
 80020a4:	f000 f866 	bl	8002174 <__sinit>
 80020a8:	ab05      	add	r3, sp, #20
 80020aa:	4620      	mov	r0, r4
 80020ac:	9a04      	ldr	r2, [sp, #16]
 80020ae:	68a1      	ldr	r1, [r4, #8]
 80020b0:	9301      	str	r3, [sp, #4]
 80020b2:	f000 f981 	bl	80023b8 <_vfiprintf_r>
 80020b6:	b002      	add	sp, #8
 80020b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020bc:	b004      	add	sp, #16
 80020be:	4770      	bx	lr
 80020c0:	2000000c 	.word	0x2000000c

080020c4 <std>:
 80020c4:	2300      	movs	r3, #0
 80020c6:	b510      	push	{r4, lr}
 80020c8:	4604      	mov	r4, r0
 80020ca:	e9c0 3300 	strd	r3, r3, [r0]
 80020ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80020d2:	6083      	str	r3, [r0, #8]
 80020d4:	8181      	strh	r1, [r0, #12]
 80020d6:	6643      	str	r3, [r0, #100]	; 0x64
 80020d8:	81c2      	strh	r2, [r0, #14]
 80020da:	6183      	str	r3, [r0, #24]
 80020dc:	4619      	mov	r1, r3
 80020de:	2208      	movs	r2, #8
 80020e0:	305c      	adds	r0, #92	; 0x5c
 80020e2:	f7ff ffcf 	bl	8002084 <memset>
 80020e6:	4b05      	ldr	r3, [pc, #20]	; (80020fc <std+0x38>)
 80020e8:	6224      	str	r4, [r4, #32]
 80020ea:	6263      	str	r3, [r4, #36]	; 0x24
 80020ec:	4b04      	ldr	r3, [pc, #16]	; (8002100 <std+0x3c>)
 80020ee:	62a3      	str	r3, [r4, #40]	; 0x28
 80020f0:	4b04      	ldr	r3, [pc, #16]	; (8002104 <std+0x40>)
 80020f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80020f4:	4b04      	ldr	r3, [pc, #16]	; (8002108 <std+0x44>)
 80020f6:	6323      	str	r3, [r4, #48]	; 0x30
 80020f8:	bd10      	pop	{r4, pc}
 80020fa:	bf00      	nop
 80020fc:	08002965 	.word	0x08002965
 8002100:	08002987 	.word	0x08002987
 8002104:	080029bf 	.word	0x080029bf
 8002108:	080029e3 	.word	0x080029e3

0800210c <_cleanup_r>:
 800210c:	4901      	ldr	r1, [pc, #4]	; (8002114 <_cleanup_r+0x8>)
 800210e:	f000 b8af 	b.w	8002270 <_fwalk_reent>
 8002112:	bf00      	nop
 8002114:	08002cbd 	.word	0x08002cbd

08002118 <__sfmoreglue>:
 8002118:	b570      	push	{r4, r5, r6, lr}
 800211a:	2568      	movs	r5, #104	; 0x68
 800211c:	1e4a      	subs	r2, r1, #1
 800211e:	4355      	muls	r5, r2
 8002120:	460e      	mov	r6, r1
 8002122:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002126:	f000 f8c5 	bl	80022b4 <_malloc_r>
 800212a:	4604      	mov	r4, r0
 800212c:	b140      	cbz	r0, 8002140 <__sfmoreglue+0x28>
 800212e:	2100      	movs	r1, #0
 8002130:	e9c0 1600 	strd	r1, r6, [r0]
 8002134:	300c      	adds	r0, #12
 8002136:	60a0      	str	r0, [r4, #8]
 8002138:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800213c:	f7ff ffa2 	bl	8002084 <memset>
 8002140:	4620      	mov	r0, r4
 8002142:	bd70      	pop	{r4, r5, r6, pc}

08002144 <__sfp_lock_acquire>:
 8002144:	4801      	ldr	r0, [pc, #4]	; (800214c <__sfp_lock_acquire+0x8>)
 8002146:	f000 b8b3 	b.w	80022b0 <__retarget_lock_acquire_recursive>
 800214a:	bf00      	nop
 800214c:	20000158 	.word	0x20000158

08002150 <__sfp_lock_release>:
 8002150:	4801      	ldr	r0, [pc, #4]	; (8002158 <__sfp_lock_release+0x8>)
 8002152:	f000 b8ae 	b.w	80022b2 <__retarget_lock_release_recursive>
 8002156:	bf00      	nop
 8002158:	20000158 	.word	0x20000158

0800215c <__sinit_lock_acquire>:
 800215c:	4801      	ldr	r0, [pc, #4]	; (8002164 <__sinit_lock_acquire+0x8>)
 800215e:	f000 b8a7 	b.w	80022b0 <__retarget_lock_acquire_recursive>
 8002162:	bf00      	nop
 8002164:	20000153 	.word	0x20000153

08002168 <__sinit_lock_release>:
 8002168:	4801      	ldr	r0, [pc, #4]	; (8002170 <__sinit_lock_release+0x8>)
 800216a:	f000 b8a2 	b.w	80022b2 <__retarget_lock_release_recursive>
 800216e:	bf00      	nop
 8002170:	20000153 	.word	0x20000153

08002174 <__sinit>:
 8002174:	b510      	push	{r4, lr}
 8002176:	4604      	mov	r4, r0
 8002178:	f7ff fff0 	bl	800215c <__sinit_lock_acquire>
 800217c:	69a3      	ldr	r3, [r4, #24]
 800217e:	b11b      	cbz	r3, 8002188 <__sinit+0x14>
 8002180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002184:	f7ff bff0 	b.w	8002168 <__sinit_lock_release>
 8002188:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800218c:	6523      	str	r3, [r4, #80]	; 0x50
 800218e:	4b13      	ldr	r3, [pc, #76]	; (80021dc <__sinit+0x68>)
 8002190:	4a13      	ldr	r2, [pc, #76]	; (80021e0 <__sinit+0x6c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	62a2      	str	r2, [r4, #40]	; 0x28
 8002196:	42a3      	cmp	r3, r4
 8002198:	bf08      	it	eq
 800219a:	2301      	moveq	r3, #1
 800219c:	4620      	mov	r0, r4
 800219e:	bf08      	it	eq
 80021a0:	61a3      	streq	r3, [r4, #24]
 80021a2:	f000 f81f 	bl	80021e4 <__sfp>
 80021a6:	6060      	str	r0, [r4, #4]
 80021a8:	4620      	mov	r0, r4
 80021aa:	f000 f81b 	bl	80021e4 <__sfp>
 80021ae:	60a0      	str	r0, [r4, #8]
 80021b0:	4620      	mov	r0, r4
 80021b2:	f000 f817 	bl	80021e4 <__sfp>
 80021b6:	2200      	movs	r2, #0
 80021b8:	2104      	movs	r1, #4
 80021ba:	60e0      	str	r0, [r4, #12]
 80021bc:	6860      	ldr	r0, [r4, #4]
 80021be:	f7ff ff81 	bl	80020c4 <std>
 80021c2:	2201      	movs	r2, #1
 80021c4:	2109      	movs	r1, #9
 80021c6:	68a0      	ldr	r0, [r4, #8]
 80021c8:	f7ff ff7c 	bl	80020c4 <std>
 80021cc:	2202      	movs	r2, #2
 80021ce:	2112      	movs	r1, #18
 80021d0:	68e0      	ldr	r0, [r4, #12]
 80021d2:	f7ff ff77 	bl	80020c4 <std>
 80021d6:	2301      	movs	r3, #1
 80021d8:	61a3      	str	r3, [r4, #24]
 80021da:	e7d1      	b.n	8002180 <__sinit+0xc>
 80021dc:	08002fcc 	.word	0x08002fcc
 80021e0:	0800210d 	.word	0x0800210d

080021e4 <__sfp>:
 80021e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021e6:	4607      	mov	r7, r0
 80021e8:	f7ff ffac 	bl	8002144 <__sfp_lock_acquire>
 80021ec:	4b1e      	ldr	r3, [pc, #120]	; (8002268 <__sfp+0x84>)
 80021ee:	681e      	ldr	r6, [r3, #0]
 80021f0:	69b3      	ldr	r3, [r6, #24]
 80021f2:	b913      	cbnz	r3, 80021fa <__sfp+0x16>
 80021f4:	4630      	mov	r0, r6
 80021f6:	f7ff ffbd 	bl	8002174 <__sinit>
 80021fa:	3648      	adds	r6, #72	; 0x48
 80021fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002200:	3b01      	subs	r3, #1
 8002202:	d503      	bpl.n	800220c <__sfp+0x28>
 8002204:	6833      	ldr	r3, [r6, #0]
 8002206:	b30b      	cbz	r3, 800224c <__sfp+0x68>
 8002208:	6836      	ldr	r6, [r6, #0]
 800220a:	e7f7      	b.n	80021fc <__sfp+0x18>
 800220c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002210:	b9d5      	cbnz	r5, 8002248 <__sfp+0x64>
 8002212:	4b16      	ldr	r3, [pc, #88]	; (800226c <__sfp+0x88>)
 8002214:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002218:	60e3      	str	r3, [r4, #12]
 800221a:	6665      	str	r5, [r4, #100]	; 0x64
 800221c:	f000 f847 	bl	80022ae <__retarget_lock_init_recursive>
 8002220:	f7ff ff96 	bl	8002150 <__sfp_lock_release>
 8002224:	2208      	movs	r2, #8
 8002226:	4629      	mov	r1, r5
 8002228:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800222c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002230:	6025      	str	r5, [r4, #0]
 8002232:	61a5      	str	r5, [r4, #24]
 8002234:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002238:	f7ff ff24 	bl	8002084 <memset>
 800223c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002240:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002244:	4620      	mov	r0, r4
 8002246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002248:	3468      	adds	r4, #104	; 0x68
 800224a:	e7d9      	b.n	8002200 <__sfp+0x1c>
 800224c:	2104      	movs	r1, #4
 800224e:	4638      	mov	r0, r7
 8002250:	f7ff ff62 	bl	8002118 <__sfmoreglue>
 8002254:	4604      	mov	r4, r0
 8002256:	6030      	str	r0, [r6, #0]
 8002258:	2800      	cmp	r0, #0
 800225a:	d1d5      	bne.n	8002208 <__sfp+0x24>
 800225c:	f7ff ff78 	bl	8002150 <__sfp_lock_release>
 8002260:	230c      	movs	r3, #12
 8002262:	603b      	str	r3, [r7, #0]
 8002264:	e7ee      	b.n	8002244 <__sfp+0x60>
 8002266:	bf00      	nop
 8002268:	08002fcc 	.word	0x08002fcc
 800226c:	ffff0001 	.word	0xffff0001

08002270 <_fwalk_reent>:
 8002270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002274:	4606      	mov	r6, r0
 8002276:	4688      	mov	r8, r1
 8002278:	2700      	movs	r7, #0
 800227a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800227e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002282:	f1b9 0901 	subs.w	r9, r9, #1
 8002286:	d505      	bpl.n	8002294 <_fwalk_reent+0x24>
 8002288:	6824      	ldr	r4, [r4, #0]
 800228a:	2c00      	cmp	r4, #0
 800228c:	d1f7      	bne.n	800227e <_fwalk_reent+0xe>
 800228e:	4638      	mov	r0, r7
 8002290:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002294:	89ab      	ldrh	r3, [r5, #12]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d907      	bls.n	80022aa <_fwalk_reent+0x3a>
 800229a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800229e:	3301      	adds	r3, #1
 80022a0:	d003      	beq.n	80022aa <_fwalk_reent+0x3a>
 80022a2:	4629      	mov	r1, r5
 80022a4:	4630      	mov	r0, r6
 80022a6:	47c0      	blx	r8
 80022a8:	4307      	orrs	r7, r0
 80022aa:	3568      	adds	r5, #104	; 0x68
 80022ac:	e7e9      	b.n	8002282 <_fwalk_reent+0x12>

080022ae <__retarget_lock_init_recursive>:
 80022ae:	4770      	bx	lr

080022b0 <__retarget_lock_acquire_recursive>:
 80022b0:	4770      	bx	lr

080022b2 <__retarget_lock_release_recursive>:
 80022b2:	4770      	bx	lr

080022b4 <_malloc_r>:
 80022b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022b6:	1ccd      	adds	r5, r1, #3
 80022b8:	f025 0503 	bic.w	r5, r5, #3
 80022bc:	3508      	adds	r5, #8
 80022be:	2d0c      	cmp	r5, #12
 80022c0:	bf38      	it	cc
 80022c2:	250c      	movcc	r5, #12
 80022c4:	2d00      	cmp	r5, #0
 80022c6:	4606      	mov	r6, r0
 80022c8:	db01      	blt.n	80022ce <_malloc_r+0x1a>
 80022ca:	42a9      	cmp	r1, r5
 80022cc:	d903      	bls.n	80022d6 <_malloc_r+0x22>
 80022ce:	230c      	movs	r3, #12
 80022d0:	6033      	str	r3, [r6, #0]
 80022d2:	2000      	movs	r0, #0
 80022d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022d6:	f000 fdb1 	bl	8002e3c <__malloc_lock>
 80022da:	4921      	ldr	r1, [pc, #132]	; (8002360 <_malloc_r+0xac>)
 80022dc:	680a      	ldr	r2, [r1, #0]
 80022de:	4614      	mov	r4, r2
 80022e0:	b99c      	cbnz	r4, 800230a <_malloc_r+0x56>
 80022e2:	4f20      	ldr	r7, [pc, #128]	; (8002364 <_malloc_r+0xb0>)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	b923      	cbnz	r3, 80022f2 <_malloc_r+0x3e>
 80022e8:	4621      	mov	r1, r4
 80022ea:	4630      	mov	r0, r6
 80022ec:	f000 fb2a 	bl	8002944 <_sbrk_r>
 80022f0:	6038      	str	r0, [r7, #0]
 80022f2:	4629      	mov	r1, r5
 80022f4:	4630      	mov	r0, r6
 80022f6:	f000 fb25 	bl	8002944 <_sbrk_r>
 80022fa:	1c43      	adds	r3, r0, #1
 80022fc:	d123      	bne.n	8002346 <_malloc_r+0x92>
 80022fe:	230c      	movs	r3, #12
 8002300:	4630      	mov	r0, r6
 8002302:	6033      	str	r3, [r6, #0]
 8002304:	f000 fda0 	bl	8002e48 <__malloc_unlock>
 8002308:	e7e3      	b.n	80022d2 <_malloc_r+0x1e>
 800230a:	6823      	ldr	r3, [r4, #0]
 800230c:	1b5b      	subs	r3, r3, r5
 800230e:	d417      	bmi.n	8002340 <_malloc_r+0x8c>
 8002310:	2b0b      	cmp	r3, #11
 8002312:	d903      	bls.n	800231c <_malloc_r+0x68>
 8002314:	6023      	str	r3, [r4, #0]
 8002316:	441c      	add	r4, r3
 8002318:	6025      	str	r5, [r4, #0]
 800231a:	e004      	b.n	8002326 <_malloc_r+0x72>
 800231c:	6863      	ldr	r3, [r4, #4]
 800231e:	42a2      	cmp	r2, r4
 8002320:	bf0c      	ite	eq
 8002322:	600b      	streq	r3, [r1, #0]
 8002324:	6053      	strne	r3, [r2, #4]
 8002326:	4630      	mov	r0, r6
 8002328:	f000 fd8e 	bl	8002e48 <__malloc_unlock>
 800232c:	f104 000b 	add.w	r0, r4, #11
 8002330:	1d23      	adds	r3, r4, #4
 8002332:	f020 0007 	bic.w	r0, r0, #7
 8002336:	1ac2      	subs	r2, r0, r3
 8002338:	d0cc      	beq.n	80022d4 <_malloc_r+0x20>
 800233a:	1a1b      	subs	r3, r3, r0
 800233c:	50a3      	str	r3, [r4, r2]
 800233e:	e7c9      	b.n	80022d4 <_malloc_r+0x20>
 8002340:	4622      	mov	r2, r4
 8002342:	6864      	ldr	r4, [r4, #4]
 8002344:	e7cc      	b.n	80022e0 <_malloc_r+0x2c>
 8002346:	1cc4      	adds	r4, r0, #3
 8002348:	f024 0403 	bic.w	r4, r4, #3
 800234c:	42a0      	cmp	r0, r4
 800234e:	d0e3      	beq.n	8002318 <_malloc_r+0x64>
 8002350:	1a21      	subs	r1, r4, r0
 8002352:	4630      	mov	r0, r6
 8002354:	f000 faf6 	bl	8002944 <_sbrk_r>
 8002358:	3001      	adds	r0, #1
 800235a:	d1dd      	bne.n	8002318 <_malloc_r+0x64>
 800235c:	e7cf      	b.n	80022fe <_malloc_r+0x4a>
 800235e:	bf00      	nop
 8002360:	20000098 	.word	0x20000098
 8002364:	2000009c 	.word	0x2000009c

08002368 <__sfputc_r>:
 8002368:	6893      	ldr	r3, [r2, #8]
 800236a:	b410      	push	{r4}
 800236c:	3b01      	subs	r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	6093      	str	r3, [r2, #8]
 8002372:	da07      	bge.n	8002384 <__sfputc_r+0x1c>
 8002374:	6994      	ldr	r4, [r2, #24]
 8002376:	42a3      	cmp	r3, r4
 8002378:	db01      	blt.n	800237e <__sfputc_r+0x16>
 800237a:	290a      	cmp	r1, #10
 800237c:	d102      	bne.n	8002384 <__sfputc_r+0x1c>
 800237e:	bc10      	pop	{r4}
 8002380:	f000 bb34 	b.w	80029ec <__swbuf_r>
 8002384:	6813      	ldr	r3, [r2, #0]
 8002386:	1c58      	adds	r0, r3, #1
 8002388:	6010      	str	r0, [r2, #0]
 800238a:	7019      	strb	r1, [r3, #0]
 800238c:	4608      	mov	r0, r1
 800238e:	bc10      	pop	{r4}
 8002390:	4770      	bx	lr

08002392 <__sfputs_r>:
 8002392:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002394:	4606      	mov	r6, r0
 8002396:	460f      	mov	r7, r1
 8002398:	4614      	mov	r4, r2
 800239a:	18d5      	adds	r5, r2, r3
 800239c:	42ac      	cmp	r4, r5
 800239e:	d101      	bne.n	80023a4 <__sfputs_r+0x12>
 80023a0:	2000      	movs	r0, #0
 80023a2:	e007      	b.n	80023b4 <__sfputs_r+0x22>
 80023a4:	463a      	mov	r2, r7
 80023a6:	4630      	mov	r0, r6
 80023a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023ac:	f7ff ffdc 	bl	8002368 <__sfputc_r>
 80023b0:	1c43      	adds	r3, r0, #1
 80023b2:	d1f3      	bne.n	800239c <__sfputs_r+0xa>
 80023b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080023b8 <_vfiprintf_r>:
 80023b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023bc:	460d      	mov	r5, r1
 80023be:	4614      	mov	r4, r2
 80023c0:	4698      	mov	r8, r3
 80023c2:	4606      	mov	r6, r0
 80023c4:	b09d      	sub	sp, #116	; 0x74
 80023c6:	b118      	cbz	r0, 80023d0 <_vfiprintf_r+0x18>
 80023c8:	6983      	ldr	r3, [r0, #24]
 80023ca:	b90b      	cbnz	r3, 80023d0 <_vfiprintf_r+0x18>
 80023cc:	f7ff fed2 	bl	8002174 <__sinit>
 80023d0:	4b89      	ldr	r3, [pc, #548]	; (80025f8 <_vfiprintf_r+0x240>)
 80023d2:	429d      	cmp	r5, r3
 80023d4:	d11b      	bne.n	800240e <_vfiprintf_r+0x56>
 80023d6:	6875      	ldr	r5, [r6, #4]
 80023d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80023da:	07d9      	lsls	r1, r3, #31
 80023dc:	d405      	bmi.n	80023ea <_vfiprintf_r+0x32>
 80023de:	89ab      	ldrh	r3, [r5, #12]
 80023e0:	059a      	lsls	r2, r3, #22
 80023e2:	d402      	bmi.n	80023ea <_vfiprintf_r+0x32>
 80023e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80023e6:	f7ff ff63 	bl	80022b0 <__retarget_lock_acquire_recursive>
 80023ea:	89ab      	ldrh	r3, [r5, #12]
 80023ec:	071b      	lsls	r3, r3, #28
 80023ee:	d501      	bpl.n	80023f4 <_vfiprintf_r+0x3c>
 80023f0:	692b      	ldr	r3, [r5, #16]
 80023f2:	b9eb      	cbnz	r3, 8002430 <_vfiprintf_r+0x78>
 80023f4:	4629      	mov	r1, r5
 80023f6:	4630      	mov	r0, r6
 80023f8:	f000 fb5c 	bl	8002ab4 <__swsetup_r>
 80023fc:	b1c0      	cbz	r0, 8002430 <_vfiprintf_r+0x78>
 80023fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002400:	07dc      	lsls	r4, r3, #31
 8002402:	d50e      	bpl.n	8002422 <_vfiprintf_r+0x6a>
 8002404:	f04f 30ff 	mov.w	r0, #4294967295
 8002408:	b01d      	add	sp, #116	; 0x74
 800240a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800240e:	4b7b      	ldr	r3, [pc, #492]	; (80025fc <_vfiprintf_r+0x244>)
 8002410:	429d      	cmp	r5, r3
 8002412:	d101      	bne.n	8002418 <_vfiprintf_r+0x60>
 8002414:	68b5      	ldr	r5, [r6, #8]
 8002416:	e7df      	b.n	80023d8 <_vfiprintf_r+0x20>
 8002418:	4b79      	ldr	r3, [pc, #484]	; (8002600 <_vfiprintf_r+0x248>)
 800241a:	429d      	cmp	r5, r3
 800241c:	bf08      	it	eq
 800241e:	68f5      	ldreq	r5, [r6, #12]
 8002420:	e7da      	b.n	80023d8 <_vfiprintf_r+0x20>
 8002422:	89ab      	ldrh	r3, [r5, #12]
 8002424:	0598      	lsls	r0, r3, #22
 8002426:	d4ed      	bmi.n	8002404 <_vfiprintf_r+0x4c>
 8002428:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800242a:	f7ff ff42 	bl	80022b2 <__retarget_lock_release_recursive>
 800242e:	e7e9      	b.n	8002404 <_vfiprintf_r+0x4c>
 8002430:	2300      	movs	r3, #0
 8002432:	9309      	str	r3, [sp, #36]	; 0x24
 8002434:	2320      	movs	r3, #32
 8002436:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800243a:	2330      	movs	r3, #48	; 0x30
 800243c:	f04f 0901 	mov.w	r9, #1
 8002440:	f8cd 800c 	str.w	r8, [sp, #12]
 8002444:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002604 <_vfiprintf_r+0x24c>
 8002448:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800244c:	4623      	mov	r3, r4
 800244e:	469a      	mov	sl, r3
 8002450:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002454:	b10a      	cbz	r2, 800245a <_vfiprintf_r+0xa2>
 8002456:	2a25      	cmp	r2, #37	; 0x25
 8002458:	d1f9      	bne.n	800244e <_vfiprintf_r+0x96>
 800245a:	ebba 0b04 	subs.w	fp, sl, r4
 800245e:	d00b      	beq.n	8002478 <_vfiprintf_r+0xc0>
 8002460:	465b      	mov	r3, fp
 8002462:	4622      	mov	r2, r4
 8002464:	4629      	mov	r1, r5
 8002466:	4630      	mov	r0, r6
 8002468:	f7ff ff93 	bl	8002392 <__sfputs_r>
 800246c:	3001      	adds	r0, #1
 800246e:	f000 80aa 	beq.w	80025c6 <_vfiprintf_r+0x20e>
 8002472:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002474:	445a      	add	r2, fp
 8002476:	9209      	str	r2, [sp, #36]	; 0x24
 8002478:	f89a 3000 	ldrb.w	r3, [sl]
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 80a2 	beq.w	80025c6 <_vfiprintf_r+0x20e>
 8002482:	2300      	movs	r3, #0
 8002484:	f04f 32ff 	mov.w	r2, #4294967295
 8002488:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800248c:	f10a 0a01 	add.w	sl, sl, #1
 8002490:	9304      	str	r3, [sp, #16]
 8002492:	9307      	str	r3, [sp, #28]
 8002494:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002498:	931a      	str	r3, [sp, #104]	; 0x68
 800249a:	4654      	mov	r4, sl
 800249c:	2205      	movs	r2, #5
 800249e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024a2:	4858      	ldr	r0, [pc, #352]	; (8002604 <_vfiprintf_r+0x24c>)
 80024a4:	f000 fcbc 	bl	8002e20 <memchr>
 80024a8:	9a04      	ldr	r2, [sp, #16]
 80024aa:	b9d8      	cbnz	r0, 80024e4 <_vfiprintf_r+0x12c>
 80024ac:	06d1      	lsls	r1, r2, #27
 80024ae:	bf44      	itt	mi
 80024b0:	2320      	movmi	r3, #32
 80024b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80024b6:	0713      	lsls	r3, r2, #28
 80024b8:	bf44      	itt	mi
 80024ba:	232b      	movmi	r3, #43	; 0x2b
 80024bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80024c0:	f89a 3000 	ldrb.w	r3, [sl]
 80024c4:	2b2a      	cmp	r3, #42	; 0x2a
 80024c6:	d015      	beq.n	80024f4 <_vfiprintf_r+0x13c>
 80024c8:	4654      	mov	r4, sl
 80024ca:	2000      	movs	r0, #0
 80024cc:	f04f 0c0a 	mov.w	ip, #10
 80024d0:	9a07      	ldr	r2, [sp, #28]
 80024d2:	4621      	mov	r1, r4
 80024d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80024d8:	3b30      	subs	r3, #48	; 0x30
 80024da:	2b09      	cmp	r3, #9
 80024dc:	d94e      	bls.n	800257c <_vfiprintf_r+0x1c4>
 80024de:	b1b0      	cbz	r0, 800250e <_vfiprintf_r+0x156>
 80024e0:	9207      	str	r2, [sp, #28]
 80024e2:	e014      	b.n	800250e <_vfiprintf_r+0x156>
 80024e4:	eba0 0308 	sub.w	r3, r0, r8
 80024e8:	fa09 f303 	lsl.w	r3, r9, r3
 80024ec:	4313      	orrs	r3, r2
 80024ee:	46a2      	mov	sl, r4
 80024f0:	9304      	str	r3, [sp, #16]
 80024f2:	e7d2      	b.n	800249a <_vfiprintf_r+0xe2>
 80024f4:	9b03      	ldr	r3, [sp, #12]
 80024f6:	1d19      	adds	r1, r3, #4
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	9103      	str	r1, [sp, #12]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	bfbb      	ittet	lt
 8002500:	425b      	neglt	r3, r3
 8002502:	f042 0202 	orrlt.w	r2, r2, #2
 8002506:	9307      	strge	r3, [sp, #28]
 8002508:	9307      	strlt	r3, [sp, #28]
 800250a:	bfb8      	it	lt
 800250c:	9204      	strlt	r2, [sp, #16]
 800250e:	7823      	ldrb	r3, [r4, #0]
 8002510:	2b2e      	cmp	r3, #46	; 0x2e
 8002512:	d10c      	bne.n	800252e <_vfiprintf_r+0x176>
 8002514:	7863      	ldrb	r3, [r4, #1]
 8002516:	2b2a      	cmp	r3, #42	; 0x2a
 8002518:	d135      	bne.n	8002586 <_vfiprintf_r+0x1ce>
 800251a:	9b03      	ldr	r3, [sp, #12]
 800251c:	3402      	adds	r4, #2
 800251e:	1d1a      	adds	r2, r3, #4
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	9203      	str	r2, [sp, #12]
 8002524:	2b00      	cmp	r3, #0
 8002526:	bfb8      	it	lt
 8002528:	f04f 33ff 	movlt.w	r3, #4294967295
 800252c:	9305      	str	r3, [sp, #20]
 800252e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002614 <_vfiprintf_r+0x25c>
 8002532:	2203      	movs	r2, #3
 8002534:	4650      	mov	r0, sl
 8002536:	7821      	ldrb	r1, [r4, #0]
 8002538:	f000 fc72 	bl	8002e20 <memchr>
 800253c:	b140      	cbz	r0, 8002550 <_vfiprintf_r+0x198>
 800253e:	2340      	movs	r3, #64	; 0x40
 8002540:	eba0 000a 	sub.w	r0, r0, sl
 8002544:	fa03 f000 	lsl.w	r0, r3, r0
 8002548:	9b04      	ldr	r3, [sp, #16]
 800254a:	3401      	adds	r4, #1
 800254c:	4303      	orrs	r3, r0
 800254e:	9304      	str	r3, [sp, #16]
 8002550:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002554:	2206      	movs	r2, #6
 8002556:	482c      	ldr	r0, [pc, #176]	; (8002608 <_vfiprintf_r+0x250>)
 8002558:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800255c:	f000 fc60 	bl	8002e20 <memchr>
 8002560:	2800      	cmp	r0, #0
 8002562:	d03f      	beq.n	80025e4 <_vfiprintf_r+0x22c>
 8002564:	4b29      	ldr	r3, [pc, #164]	; (800260c <_vfiprintf_r+0x254>)
 8002566:	bb1b      	cbnz	r3, 80025b0 <_vfiprintf_r+0x1f8>
 8002568:	9b03      	ldr	r3, [sp, #12]
 800256a:	3307      	adds	r3, #7
 800256c:	f023 0307 	bic.w	r3, r3, #7
 8002570:	3308      	adds	r3, #8
 8002572:	9303      	str	r3, [sp, #12]
 8002574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002576:	443b      	add	r3, r7
 8002578:	9309      	str	r3, [sp, #36]	; 0x24
 800257a:	e767      	b.n	800244c <_vfiprintf_r+0x94>
 800257c:	460c      	mov	r4, r1
 800257e:	2001      	movs	r0, #1
 8002580:	fb0c 3202 	mla	r2, ip, r2, r3
 8002584:	e7a5      	b.n	80024d2 <_vfiprintf_r+0x11a>
 8002586:	2300      	movs	r3, #0
 8002588:	f04f 0c0a 	mov.w	ip, #10
 800258c:	4619      	mov	r1, r3
 800258e:	3401      	adds	r4, #1
 8002590:	9305      	str	r3, [sp, #20]
 8002592:	4620      	mov	r0, r4
 8002594:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002598:	3a30      	subs	r2, #48	; 0x30
 800259a:	2a09      	cmp	r2, #9
 800259c:	d903      	bls.n	80025a6 <_vfiprintf_r+0x1ee>
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d0c5      	beq.n	800252e <_vfiprintf_r+0x176>
 80025a2:	9105      	str	r1, [sp, #20]
 80025a4:	e7c3      	b.n	800252e <_vfiprintf_r+0x176>
 80025a6:	4604      	mov	r4, r0
 80025a8:	2301      	movs	r3, #1
 80025aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80025ae:	e7f0      	b.n	8002592 <_vfiprintf_r+0x1da>
 80025b0:	ab03      	add	r3, sp, #12
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	462a      	mov	r2, r5
 80025b6:	4630      	mov	r0, r6
 80025b8:	4b15      	ldr	r3, [pc, #84]	; (8002610 <_vfiprintf_r+0x258>)
 80025ba:	a904      	add	r1, sp, #16
 80025bc:	f3af 8000 	nop.w
 80025c0:	4607      	mov	r7, r0
 80025c2:	1c78      	adds	r0, r7, #1
 80025c4:	d1d6      	bne.n	8002574 <_vfiprintf_r+0x1bc>
 80025c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80025c8:	07d9      	lsls	r1, r3, #31
 80025ca:	d405      	bmi.n	80025d8 <_vfiprintf_r+0x220>
 80025cc:	89ab      	ldrh	r3, [r5, #12]
 80025ce:	059a      	lsls	r2, r3, #22
 80025d0:	d402      	bmi.n	80025d8 <_vfiprintf_r+0x220>
 80025d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80025d4:	f7ff fe6d 	bl	80022b2 <__retarget_lock_release_recursive>
 80025d8:	89ab      	ldrh	r3, [r5, #12]
 80025da:	065b      	lsls	r3, r3, #25
 80025dc:	f53f af12 	bmi.w	8002404 <_vfiprintf_r+0x4c>
 80025e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80025e2:	e711      	b.n	8002408 <_vfiprintf_r+0x50>
 80025e4:	ab03      	add	r3, sp, #12
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	462a      	mov	r2, r5
 80025ea:	4630      	mov	r0, r6
 80025ec:	4b08      	ldr	r3, [pc, #32]	; (8002610 <_vfiprintf_r+0x258>)
 80025ee:	a904      	add	r1, sp, #16
 80025f0:	f000 f882 	bl	80026f8 <_printf_i>
 80025f4:	e7e4      	b.n	80025c0 <_vfiprintf_r+0x208>
 80025f6:	bf00      	nop
 80025f8:	08002ff0 	.word	0x08002ff0
 80025fc:	08003010 	.word	0x08003010
 8002600:	08002fd0 	.word	0x08002fd0
 8002604:	08003030 	.word	0x08003030
 8002608:	0800303a 	.word	0x0800303a
 800260c:	00000000 	.word	0x00000000
 8002610:	08002393 	.word	0x08002393
 8002614:	08003036 	.word	0x08003036

08002618 <_printf_common>:
 8002618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800261c:	4616      	mov	r6, r2
 800261e:	4699      	mov	r9, r3
 8002620:	688a      	ldr	r2, [r1, #8]
 8002622:	690b      	ldr	r3, [r1, #16]
 8002624:	4607      	mov	r7, r0
 8002626:	4293      	cmp	r3, r2
 8002628:	bfb8      	it	lt
 800262a:	4613      	movlt	r3, r2
 800262c:	6033      	str	r3, [r6, #0]
 800262e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002632:	460c      	mov	r4, r1
 8002634:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002638:	b10a      	cbz	r2, 800263e <_printf_common+0x26>
 800263a:	3301      	adds	r3, #1
 800263c:	6033      	str	r3, [r6, #0]
 800263e:	6823      	ldr	r3, [r4, #0]
 8002640:	0699      	lsls	r1, r3, #26
 8002642:	bf42      	ittt	mi
 8002644:	6833      	ldrmi	r3, [r6, #0]
 8002646:	3302      	addmi	r3, #2
 8002648:	6033      	strmi	r3, [r6, #0]
 800264a:	6825      	ldr	r5, [r4, #0]
 800264c:	f015 0506 	ands.w	r5, r5, #6
 8002650:	d106      	bne.n	8002660 <_printf_common+0x48>
 8002652:	f104 0a19 	add.w	sl, r4, #25
 8002656:	68e3      	ldr	r3, [r4, #12]
 8002658:	6832      	ldr	r2, [r6, #0]
 800265a:	1a9b      	subs	r3, r3, r2
 800265c:	42ab      	cmp	r3, r5
 800265e:	dc28      	bgt.n	80026b2 <_printf_common+0x9a>
 8002660:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002664:	1e13      	subs	r3, r2, #0
 8002666:	6822      	ldr	r2, [r4, #0]
 8002668:	bf18      	it	ne
 800266a:	2301      	movne	r3, #1
 800266c:	0692      	lsls	r2, r2, #26
 800266e:	d42d      	bmi.n	80026cc <_printf_common+0xb4>
 8002670:	4649      	mov	r1, r9
 8002672:	4638      	mov	r0, r7
 8002674:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002678:	47c0      	blx	r8
 800267a:	3001      	adds	r0, #1
 800267c:	d020      	beq.n	80026c0 <_printf_common+0xa8>
 800267e:	6823      	ldr	r3, [r4, #0]
 8002680:	68e5      	ldr	r5, [r4, #12]
 8002682:	f003 0306 	and.w	r3, r3, #6
 8002686:	2b04      	cmp	r3, #4
 8002688:	bf18      	it	ne
 800268a:	2500      	movne	r5, #0
 800268c:	6832      	ldr	r2, [r6, #0]
 800268e:	f04f 0600 	mov.w	r6, #0
 8002692:	68a3      	ldr	r3, [r4, #8]
 8002694:	bf08      	it	eq
 8002696:	1aad      	subeq	r5, r5, r2
 8002698:	6922      	ldr	r2, [r4, #16]
 800269a:	bf08      	it	eq
 800269c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80026a0:	4293      	cmp	r3, r2
 80026a2:	bfc4      	itt	gt
 80026a4:	1a9b      	subgt	r3, r3, r2
 80026a6:	18ed      	addgt	r5, r5, r3
 80026a8:	341a      	adds	r4, #26
 80026aa:	42b5      	cmp	r5, r6
 80026ac:	d11a      	bne.n	80026e4 <_printf_common+0xcc>
 80026ae:	2000      	movs	r0, #0
 80026b0:	e008      	b.n	80026c4 <_printf_common+0xac>
 80026b2:	2301      	movs	r3, #1
 80026b4:	4652      	mov	r2, sl
 80026b6:	4649      	mov	r1, r9
 80026b8:	4638      	mov	r0, r7
 80026ba:	47c0      	blx	r8
 80026bc:	3001      	adds	r0, #1
 80026be:	d103      	bne.n	80026c8 <_printf_common+0xb0>
 80026c0:	f04f 30ff 	mov.w	r0, #4294967295
 80026c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026c8:	3501      	adds	r5, #1
 80026ca:	e7c4      	b.n	8002656 <_printf_common+0x3e>
 80026cc:	2030      	movs	r0, #48	; 0x30
 80026ce:	18e1      	adds	r1, r4, r3
 80026d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80026d4:	1c5a      	adds	r2, r3, #1
 80026d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80026da:	4422      	add	r2, r4
 80026dc:	3302      	adds	r3, #2
 80026de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80026e2:	e7c5      	b.n	8002670 <_printf_common+0x58>
 80026e4:	2301      	movs	r3, #1
 80026e6:	4622      	mov	r2, r4
 80026e8:	4649      	mov	r1, r9
 80026ea:	4638      	mov	r0, r7
 80026ec:	47c0      	blx	r8
 80026ee:	3001      	adds	r0, #1
 80026f0:	d0e6      	beq.n	80026c0 <_printf_common+0xa8>
 80026f2:	3601      	adds	r6, #1
 80026f4:	e7d9      	b.n	80026aa <_printf_common+0x92>
	...

080026f8 <_printf_i>:
 80026f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80026fc:	460c      	mov	r4, r1
 80026fe:	7e27      	ldrb	r7, [r4, #24]
 8002700:	4691      	mov	r9, r2
 8002702:	2f78      	cmp	r7, #120	; 0x78
 8002704:	4680      	mov	r8, r0
 8002706:	469a      	mov	sl, r3
 8002708:	990c      	ldr	r1, [sp, #48]	; 0x30
 800270a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800270e:	d807      	bhi.n	8002720 <_printf_i+0x28>
 8002710:	2f62      	cmp	r7, #98	; 0x62
 8002712:	d80a      	bhi.n	800272a <_printf_i+0x32>
 8002714:	2f00      	cmp	r7, #0
 8002716:	f000 80d9 	beq.w	80028cc <_printf_i+0x1d4>
 800271a:	2f58      	cmp	r7, #88	; 0x58
 800271c:	f000 80a4 	beq.w	8002868 <_printf_i+0x170>
 8002720:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002724:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002728:	e03a      	b.n	80027a0 <_printf_i+0xa8>
 800272a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800272e:	2b15      	cmp	r3, #21
 8002730:	d8f6      	bhi.n	8002720 <_printf_i+0x28>
 8002732:	a001      	add	r0, pc, #4	; (adr r0, 8002738 <_printf_i+0x40>)
 8002734:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002738:	08002791 	.word	0x08002791
 800273c:	080027a5 	.word	0x080027a5
 8002740:	08002721 	.word	0x08002721
 8002744:	08002721 	.word	0x08002721
 8002748:	08002721 	.word	0x08002721
 800274c:	08002721 	.word	0x08002721
 8002750:	080027a5 	.word	0x080027a5
 8002754:	08002721 	.word	0x08002721
 8002758:	08002721 	.word	0x08002721
 800275c:	08002721 	.word	0x08002721
 8002760:	08002721 	.word	0x08002721
 8002764:	080028b3 	.word	0x080028b3
 8002768:	080027d5 	.word	0x080027d5
 800276c:	08002895 	.word	0x08002895
 8002770:	08002721 	.word	0x08002721
 8002774:	08002721 	.word	0x08002721
 8002778:	080028d5 	.word	0x080028d5
 800277c:	08002721 	.word	0x08002721
 8002780:	080027d5 	.word	0x080027d5
 8002784:	08002721 	.word	0x08002721
 8002788:	08002721 	.word	0x08002721
 800278c:	0800289d 	.word	0x0800289d
 8002790:	680b      	ldr	r3, [r1, #0]
 8002792:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002796:	1d1a      	adds	r2, r3, #4
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	600a      	str	r2, [r1, #0]
 800279c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80027a0:	2301      	movs	r3, #1
 80027a2:	e0a4      	b.n	80028ee <_printf_i+0x1f6>
 80027a4:	6825      	ldr	r5, [r4, #0]
 80027a6:	6808      	ldr	r0, [r1, #0]
 80027a8:	062e      	lsls	r6, r5, #24
 80027aa:	f100 0304 	add.w	r3, r0, #4
 80027ae:	d50a      	bpl.n	80027c6 <_printf_i+0xce>
 80027b0:	6805      	ldr	r5, [r0, #0]
 80027b2:	600b      	str	r3, [r1, #0]
 80027b4:	2d00      	cmp	r5, #0
 80027b6:	da03      	bge.n	80027c0 <_printf_i+0xc8>
 80027b8:	232d      	movs	r3, #45	; 0x2d
 80027ba:	426d      	negs	r5, r5
 80027bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80027c0:	230a      	movs	r3, #10
 80027c2:	485e      	ldr	r0, [pc, #376]	; (800293c <_printf_i+0x244>)
 80027c4:	e019      	b.n	80027fa <_printf_i+0x102>
 80027c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80027ca:	6805      	ldr	r5, [r0, #0]
 80027cc:	600b      	str	r3, [r1, #0]
 80027ce:	bf18      	it	ne
 80027d0:	b22d      	sxthne	r5, r5
 80027d2:	e7ef      	b.n	80027b4 <_printf_i+0xbc>
 80027d4:	680b      	ldr	r3, [r1, #0]
 80027d6:	6825      	ldr	r5, [r4, #0]
 80027d8:	1d18      	adds	r0, r3, #4
 80027da:	6008      	str	r0, [r1, #0]
 80027dc:	0628      	lsls	r0, r5, #24
 80027de:	d501      	bpl.n	80027e4 <_printf_i+0xec>
 80027e0:	681d      	ldr	r5, [r3, #0]
 80027e2:	e002      	b.n	80027ea <_printf_i+0xf2>
 80027e4:	0669      	lsls	r1, r5, #25
 80027e6:	d5fb      	bpl.n	80027e0 <_printf_i+0xe8>
 80027e8:	881d      	ldrh	r5, [r3, #0]
 80027ea:	2f6f      	cmp	r7, #111	; 0x6f
 80027ec:	bf0c      	ite	eq
 80027ee:	2308      	moveq	r3, #8
 80027f0:	230a      	movne	r3, #10
 80027f2:	4852      	ldr	r0, [pc, #328]	; (800293c <_printf_i+0x244>)
 80027f4:	2100      	movs	r1, #0
 80027f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80027fa:	6866      	ldr	r6, [r4, #4]
 80027fc:	2e00      	cmp	r6, #0
 80027fe:	bfa8      	it	ge
 8002800:	6821      	ldrge	r1, [r4, #0]
 8002802:	60a6      	str	r6, [r4, #8]
 8002804:	bfa4      	itt	ge
 8002806:	f021 0104 	bicge.w	r1, r1, #4
 800280a:	6021      	strge	r1, [r4, #0]
 800280c:	b90d      	cbnz	r5, 8002812 <_printf_i+0x11a>
 800280e:	2e00      	cmp	r6, #0
 8002810:	d04d      	beq.n	80028ae <_printf_i+0x1b6>
 8002812:	4616      	mov	r6, r2
 8002814:	fbb5 f1f3 	udiv	r1, r5, r3
 8002818:	fb03 5711 	mls	r7, r3, r1, r5
 800281c:	5dc7      	ldrb	r7, [r0, r7]
 800281e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002822:	462f      	mov	r7, r5
 8002824:	42bb      	cmp	r3, r7
 8002826:	460d      	mov	r5, r1
 8002828:	d9f4      	bls.n	8002814 <_printf_i+0x11c>
 800282a:	2b08      	cmp	r3, #8
 800282c:	d10b      	bne.n	8002846 <_printf_i+0x14e>
 800282e:	6823      	ldr	r3, [r4, #0]
 8002830:	07df      	lsls	r7, r3, #31
 8002832:	d508      	bpl.n	8002846 <_printf_i+0x14e>
 8002834:	6923      	ldr	r3, [r4, #16]
 8002836:	6861      	ldr	r1, [r4, #4]
 8002838:	4299      	cmp	r1, r3
 800283a:	bfde      	ittt	le
 800283c:	2330      	movle	r3, #48	; 0x30
 800283e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002842:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002846:	1b92      	subs	r2, r2, r6
 8002848:	6122      	str	r2, [r4, #16]
 800284a:	464b      	mov	r3, r9
 800284c:	4621      	mov	r1, r4
 800284e:	4640      	mov	r0, r8
 8002850:	f8cd a000 	str.w	sl, [sp]
 8002854:	aa03      	add	r2, sp, #12
 8002856:	f7ff fedf 	bl	8002618 <_printf_common>
 800285a:	3001      	adds	r0, #1
 800285c:	d14c      	bne.n	80028f8 <_printf_i+0x200>
 800285e:	f04f 30ff 	mov.w	r0, #4294967295
 8002862:	b004      	add	sp, #16
 8002864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002868:	4834      	ldr	r0, [pc, #208]	; (800293c <_printf_i+0x244>)
 800286a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800286e:	680e      	ldr	r6, [r1, #0]
 8002870:	6823      	ldr	r3, [r4, #0]
 8002872:	f856 5b04 	ldr.w	r5, [r6], #4
 8002876:	061f      	lsls	r7, r3, #24
 8002878:	600e      	str	r6, [r1, #0]
 800287a:	d514      	bpl.n	80028a6 <_printf_i+0x1ae>
 800287c:	07d9      	lsls	r1, r3, #31
 800287e:	bf44      	itt	mi
 8002880:	f043 0320 	orrmi.w	r3, r3, #32
 8002884:	6023      	strmi	r3, [r4, #0]
 8002886:	b91d      	cbnz	r5, 8002890 <_printf_i+0x198>
 8002888:	6823      	ldr	r3, [r4, #0]
 800288a:	f023 0320 	bic.w	r3, r3, #32
 800288e:	6023      	str	r3, [r4, #0]
 8002890:	2310      	movs	r3, #16
 8002892:	e7af      	b.n	80027f4 <_printf_i+0xfc>
 8002894:	6823      	ldr	r3, [r4, #0]
 8002896:	f043 0320 	orr.w	r3, r3, #32
 800289a:	6023      	str	r3, [r4, #0]
 800289c:	2378      	movs	r3, #120	; 0x78
 800289e:	4828      	ldr	r0, [pc, #160]	; (8002940 <_printf_i+0x248>)
 80028a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80028a4:	e7e3      	b.n	800286e <_printf_i+0x176>
 80028a6:	065e      	lsls	r6, r3, #25
 80028a8:	bf48      	it	mi
 80028aa:	b2ad      	uxthmi	r5, r5
 80028ac:	e7e6      	b.n	800287c <_printf_i+0x184>
 80028ae:	4616      	mov	r6, r2
 80028b0:	e7bb      	b.n	800282a <_printf_i+0x132>
 80028b2:	680b      	ldr	r3, [r1, #0]
 80028b4:	6826      	ldr	r6, [r4, #0]
 80028b6:	1d1d      	adds	r5, r3, #4
 80028b8:	6960      	ldr	r0, [r4, #20]
 80028ba:	600d      	str	r5, [r1, #0]
 80028bc:	0635      	lsls	r5, r6, #24
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	d501      	bpl.n	80028c6 <_printf_i+0x1ce>
 80028c2:	6018      	str	r0, [r3, #0]
 80028c4:	e002      	b.n	80028cc <_printf_i+0x1d4>
 80028c6:	0671      	lsls	r1, r6, #25
 80028c8:	d5fb      	bpl.n	80028c2 <_printf_i+0x1ca>
 80028ca:	8018      	strh	r0, [r3, #0]
 80028cc:	2300      	movs	r3, #0
 80028ce:	4616      	mov	r6, r2
 80028d0:	6123      	str	r3, [r4, #16]
 80028d2:	e7ba      	b.n	800284a <_printf_i+0x152>
 80028d4:	680b      	ldr	r3, [r1, #0]
 80028d6:	1d1a      	adds	r2, r3, #4
 80028d8:	600a      	str	r2, [r1, #0]
 80028da:	681e      	ldr	r6, [r3, #0]
 80028dc:	2100      	movs	r1, #0
 80028de:	4630      	mov	r0, r6
 80028e0:	6862      	ldr	r2, [r4, #4]
 80028e2:	f000 fa9d 	bl	8002e20 <memchr>
 80028e6:	b108      	cbz	r0, 80028ec <_printf_i+0x1f4>
 80028e8:	1b80      	subs	r0, r0, r6
 80028ea:	6060      	str	r0, [r4, #4]
 80028ec:	6863      	ldr	r3, [r4, #4]
 80028ee:	6123      	str	r3, [r4, #16]
 80028f0:	2300      	movs	r3, #0
 80028f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80028f6:	e7a8      	b.n	800284a <_printf_i+0x152>
 80028f8:	4632      	mov	r2, r6
 80028fa:	4649      	mov	r1, r9
 80028fc:	4640      	mov	r0, r8
 80028fe:	6923      	ldr	r3, [r4, #16]
 8002900:	47d0      	blx	sl
 8002902:	3001      	adds	r0, #1
 8002904:	d0ab      	beq.n	800285e <_printf_i+0x166>
 8002906:	6823      	ldr	r3, [r4, #0]
 8002908:	079b      	lsls	r3, r3, #30
 800290a:	d413      	bmi.n	8002934 <_printf_i+0x23c>
 800290c:	68e0      	ldr	r0, [r4, #12]
 800290e:	9b03      	ldr	r3, [sp, #12]
 8002910:	4298      	cmp	r0, r3
 8002912:	bfb8      	it	lt
 8002914:	4618      	movlt	r0, r3
 8002916:	e7a4      	b.n	8002862 <_printf_i+0x16a>
 8002918:	2301      	movs	r3, #1
 800291a:	4632      	mov	r2, r6
 800291c:	4649      	mov	r1, r9
 800291e:	4640      	mov	r0, r8
 8002920:	47d0      	blx	sl
 8002922:	3001      	adds	r0, #1
 8002924:	d09b      	beq.n	800285e <_printf_i+0x166>
 8002926:	3501      	adds	r5, #1
 8002928:	68e3      	ldr	r3, [r4, #12]
 800292a:	9903      	ldr	r1, [sp, #12]
 800292c:	1a5b      	subs	r3, r3, r1
 800292e:	42ab      	cmp	r3, r5
 8002930:	dcf2      	bgt.n	8002918 <_printf_i+0x220>
 8002932:	e7eb      	b.n	800290c <_printf_i+0x214>
 8002934:	2500      	movs	r5, #0
 8002936:	f104 0619 	add.w	r6, r4, #25
 800293a:	e7f5      	b.n	8002928 <_printf_i+0x230>
 800293c:	08003041 	.word	0x08003041
 8002940:	08003052 	.word	0x08003052

08002944 <_sbrk_r>:
 8002944:	b538      	push	{r3, r4, r5, lr}
 8002946:	2300      	movs	r3, #0
 8002948:	4d05      	ldr	r5, [pc, #20]	; (8002960 <_sbrk_r+0x1c>)
 800294a:	4604      	mov	r4, r0
 800294c:	4608      	mov	r0, r1
 800294e:	602b      	str	r3, [r5, #0]
 8002950:	f7fe f82c 	bl	80009ac <_sbrk>
 8002954:	1c43      	adds	r3, r0, #1
 8002956:	d102      	bne.n	800295e <_sbrk_r+0x1a>
 8002958:	682b      	ldr	r3, [r5, #0]
 800295a:	b103      	cbz	r3, 800295e <_sbrk_r+0x1a>
 800295c:	6023      	str	r3, [r4, #0]
 800295e:	bd38      	pop	{r3, r4, r5, pc}
 8002960:	2000015c 	.word	0x2000015c

08002964 <__sread>:
 8002964:	b510      	push	{r4, lr}
 8002966:	460c      	mov	r4, r1
 8002968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800296c:	f000 fabe 	bl	8002eec <_read_r>
 8002970:	2800      	cmp	r0, #0
 8002972:	bfab      	itete	ge
 8002974:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002976:	89a3      	ldrhlt	r3, [r4, #12]
 8002978:	181b      	addge	r3, r3, r0
 800297a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800297e:	bfac      	ite	ge
 8002980:	6563      	strge	r3, [r4, #84]	; 0x54
 8002982:	81a3      	strhlt	r3, [r4, #12]
 8002984:	bd10      	pop	{r4, pc}

08002986 <__swrite>:
 8002986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800298a:	461f      	mov	r7, r3
 800298c:	898b      	ldrh	r3, [r1, #12]
 800298e:	4605      	mov	r5, r0
 8002990:	05db      	lsls	r3, r3, #23
 8002992:	460c      	mov	r4, r1
 8002994:	4616      	mov	r6, r2
 8002996:	d505      	bpl.n	80029a4 <__swrite+0x1e>
 8002998:	2302      	movs	r3, #2
 800299a:	2200      	movs	r2, #0
 800299c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029a0:	f000 f9c8 	bl	8002d34 <_lseek_r>
 80029a4:	89a3      	ldrh	r3, [r4, #12]
 80029a6:	4632      	mov	r2, r6
 80029a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029ac:	81a3      	strh	r3, [r4, #12]
 80029ae:	4628      	mov	r0, r5
 80029b0:	463b      	mov	r3, r7
 80029b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80029b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80029ba:	f000 b869 	b.w	8002a90 <_write_r>

080029be <__sseek>:
 80029be:	b510      	push	{r4, lr}
 80029c0:	460c      	mov	r4, r1
 80029c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029c6:	f000 f9b5 	bl	8002d34 <_lseek_r>
 80029ca:	1c43      	adds	r3, r0, #1
 80029cc:	89a3      	ldrh	r3, [r4, #12]
 80029ce:	bf15      	itete	ne
 80029d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80029d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80029d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80029da:	81a3      	strheq	r3, [r4, #12]
 80029dc:	bf18      	it	ne
 80029de:	81a3      	strhne	r3, [r4, #12]
 80029e0:	bd10      	pop	{r4, pc}

080029e2 <__sclose>:
 80029e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029e6:	f000 b8d3 	b.w	8002b90 <_close_r>
	...

080029ec <__swbuf_r>:
 80029ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ee:	460e      	mov	r6, r1
 80029f0:	4614      	mov	r4, r2
 80029f2:	4605      	mov	r5, r0
 80029f4:	b118      	cbz	r0, 80029fe <__swbuf_r+0x12>
 80029f6:	6983      	ldr	r3, [r0, #24]
 80029f8:	b90b      	cbnz	r3, 80029fe <__swbuf_r+0x12>
 80029fa:	f7ff fbbb 	bl	8002174 <__sinit>
 80029fe:	4b21      	ldr	r3, [pc, #132]	; (8002a84 <__swbuf_r+0x98>)
 8002a00:	429c      	cmp	r4, r3
 8002a02:	d12b      	bne.n	8002a5c <__swbuf_r+0x70>
 8002a04:	686c      	ldr	r4, [r5, #4]
 8002a06:	69a3      	ldr	r3, [r4, #24]
 8002a08:	60a3      	str	r3, [r4, #8]
 8002a0a:	89a3      	ldrh	r3, [r4, #12]
 8002a0c:	071a      	lsls	r2, r3, #28
 8002a0e:	d52f      	bpl.n	8002a70 <__swbuf_r+0x84>
 8002a10:	6923      	ldr	r3, [r4, #16]
 8002a12:	b36b      	cbz	r3, 8002a70 <__swbuf_r+0x84>
 8002a14:	6923      	ldr	r3, [r4, #16]
 8002a16:	6820      	ldr	r0, [r4, #0]
 8002a18:	b2f6      	uxtb	r6, r6
 8002a1a:	1ac0      	subs	r0, r0, r3
 8002a1c:	6963      	ldr	r3, [r4, #20]
 8002a1e:	4637      	mov	r7, r6
 8002a20:	4283      	cmp	r3, r0
 8002a22:	dc04      	bgt.n	8002a2e <__swbuf_r+0x42>
 8002a24:	4621      	mov	r1, r4
 8002a26:	4628      	mov	r0, r5
 8002a28:	f000 f948 	bl	8002cbc <_fflush_r>
 8002a2c:	bb30      	cbnz	r0, 8002a7c <__swbuf_r+0x90>
 8002a2e:	68a3      	ldr	r3, [r4, #8]
 8002a30:	3001      	adds	r0, #1
 8002a32:	3b01      	subs	r3, #1
 8002a34:	60a3      	str	r3, [r4, #8]
 8002a36:	6823      	ldr	r3, [r4, #0]
 8002a38:	1c5a      	adds	r2, r3, #1
 8002a3a:	6022      	str	r2, [r4, #0]
 8002a3c:	701e      	strb	r6, [r3, #0]
 8002a3e:	6963      	ldr	r3, [r4, #20]
 8002a40:	4283      	cmp	r3, r0
 8002a42:	d004      	beq.n	8002a4e <__swbuf_r+0x62>
 8002a44:	89a3      	ldrh	r3, [r4, #12]
 8002a46:	07db      	lsls	r3, r3, #31
 8002a48:	d506      	bpl.n	8002a58 <__swbuf_r+0x6c>
 8002a4a:	2e0a      	cmp	r6, #10
 8002a4c:	d104      	bne.n	8002a58 <__swbuf_r+0x6c>
 8002a4e:	4621      	mov	r1, r4
 8002a50:	4628      	mov	r0, r5
 8002a52:	f000 f933 	bl	8002cbc <_fflush_r>
 8002a56:	b988      	cbnz	r0, 8002a7c <__swbuf_r+0x90>
 8002a58:	4638      	mov	r0, r7
 8002a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a5c:	4b0a      	ldr	r3, [pc, #40]	; (8002a88 <__swbuf_r+0x9c>)
 8002a5e:	429c      	cmp	r4, r3
 8002a60:	d101      	bne.n	8002a66 <__swbuf_r+0x7a>
 8002a62:	68ac      	ldr	r4, [r5, #8]
 8002a64:	e7cf      	b.n	8002a06 <__swbuf_r+0x1a>
 8002a66:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <__swbuf_r+0xa0>)
 8002a68:	429c      	cmp	r4, r3
 8002a6a:	bf08      	it	eq
 8002a6c:	68ec      	ldreq	r4, [r5, #12]
 8002a6e:	e7ca      	b.n	8002a06 <__swbuf_r+0x1a>
 8002a70:	4621      	mov	r1, r4
 8002a72:	4628      	mov	r0, r5
 8002a74:	f000 f81e 	bl	8002ab4 <__swsetup_r>
 8002a78:	2800      	cmp	r0, #0
 8002a7a:	d0cb      	beq.n	8002a14 <__swbuf_r+0x28>
 8002a7c:	f04f 37ff 	mov.w	r7, #4294967295
 8002a80:	e7ea      	b.n	8002a58 <__swbuf_r+0x6c>
 8002a82:	bf00      	nop
 8002a84:	08002ff0 	.word	0x08002ff0
 8002a88:	08003010 	.word	0x08003010
 8002a8c:	08002fd0 	.word	0x08002fd0

08002a90 <_write_r>:
 8002a90:	b538      	push	{r3, r4, r5, lr}
 8002a92:	4604      	mov	r4, r0
 8002a94:	4608      	mov	r0, r1
 8002a96:	4611      	mov	r1, r2
 8002a98:	2200      	movs	r2, #0
 8002a9a:	4d05      	ldr	r5, [pc, #20]	; (8002ab0 <_write_r+0x20>)
 8002a9c:	602a      	str	r2, [r5, #0]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	f7fd ff37 	bl	8000912 <_write>
 8002aa4:	1c43      	adds	r3, r0, #1
 8002aa6:	d102      	bne.n	8002aae <_write_r+0x1e>
 8002aa8:	682b      	ldr	r3, [r5, #0]
 8002aaa:	b103      	cbz	r3, 8002aae <_write_r+0x1e>
 8002aac:	6023      	str	r3, [r4, #0]
 8002aae:	bd38      	pop	{r3, r4, r5, pc}
 8002ab0:	2000015c 	.word	0x2000015c

08002ab4 <__swsetup_r>:
 8002ab4:	4b32      	ldr	r3, [pc, #200]	; (8002b80 <__swsetup_r+0xcc>)
 8002ab6:	b570      	push	{r4, r5, r6, lr}
 8002ab8:	681d      	ldr	r5, [r3, #0]
 8002aba:	4606      	mov	r6, r0
 8002abc:	460c      	mov	r4, r1
 8002abe:	b125      	cbz	r5, 8002aca <__swsetup_r+0x16>
 8002ac0:	69ab      	ldr	r3, [r5, #24]
 8002ac2:	b913      	cbnz	r3, 8002aca <__swsetup_r+0x16>
 8002ac4:	4628      	mov	r0, r5
 8002ac6:	f7ff fb55 	bl	8002174 <__sinit>
 8002aca:	4b2e      	ldr	r3, [pc, #184]	; (8002b84 <__swsetup_r+0xd0>)
 8002acc:	429c      	cmp	r4, r3
 8002ace:	d10f      	bne.n	8002af0 <__swsetup_r+0x3c>
 8002ad0:	686c      	ldr	r4, [r5, #4]
 8002ad2:	89a3      	ldrh	r3, [r4, #12]
 8002ad4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ad8:	0719      	lsls	r1, r3, #28
 8002ada:	d42c      	bmi.n	8002b36 <__swsetup_r+0x82>
 8002adc:	06dd      	lsls	r5, r3, #27
 8002ade:	d411      	bmi.n	8002b04 <__swsetup_r+0x50>
 8002ae0:	2309      	movs	r3, #9
 8002ae2:	6033      	str	r3, [r6, #0]
 8002ae4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8002aec:	81a3      	strh	r3, [r4, #12]
 8002aee:	e03e      	b.n	8002b6e <__swsetup_r+0xba>
 8002af0:	4b25      	ldr	r3, [pc, #148]	; (8002b88 <__swsetup_r+0xd4>)
 8002af2:	429c      	cmp	r4, r3
 8002af4:	d101      	bne.n	8002afa <__swsetup_r+0x46>
 8002af6:	68ac      	ldr	r4, [r5, #8]
 8002af8:	e7eb      	b.n	8002ad2 <__swsetup_r+0x1e>
 8002afa:	4b24      	ldr	r3, [pc, #144]	; (8002b8c <__swsetup_r+0xd8>)
 8002afc:	429c      	cmp	r4, r3
 8002afe:	bf08      	it	eq
 8002b00:	68ec      	ldreq	r4, [r5, #12]
 8002b02:	e7e6      	b.n	8002ad2 <__swsetup_r+0x1e>
 8002b04:	0758      	lsls	r0, r3, #29
 8002b06:	d512      	bpl.n	8002b2e <__swsetup_r+0x7a>
 8002b08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b0a:	b141      	cbz	r1, 8002b1e <__swsetup_r+0x6a>
 8002b0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b10:	4299      	cmp	r1, r3
 8002b12:	d002      	beq.n	8002b1a <__swsetup_r+0x66>
 8002b14:	4630      	mov	r0, r6
 8002b16:	f000 f99d 	bl	8002e54 <_free_r>
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	6363      	str	r3, [r4, #52]	; 0x34
 8002b1e:	89a3      	ldrh	r3, [r4, #12]
 8002b20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002b24:	81a3      	strh	r3, [r4, #12]
 8002b26:	2300      	movs	r3, #0
 8002b28:	6063      	str	r3, [r4, #4]
 8002b2a:	6923      	ldr	r3, [r4, #16]
 8002b2c:	6023      	str	r3, [r4, #0]
 8002b2e:	89a3      	ldrh	r3, [r4, #12]
 8002b30:	f043 0308 	orr.w	r3, r3, #8
 8002b34:	81a3      	strh	r3, [r4, #12]
 8002b36:	6923      	ldr	r3, [r4, #16]
 8002b38:	b94b      	cbnz	r3, 8002b4e <__swsetup_r+0x9a>
 8002b3a:	89a3      	ldrh	r3, [r4, #12]
 8002b3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002b40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b44:	d003      	beq.n	8002b4e <__swsetup_r+0x9a>
 8002b46:	4621      	mov	r1, r4
 8002b48:	4630      	mov	r0, r6
 8002b4a:	f000 f929 	bl	8002da0 <__smakebuf_r>
 8002b4e:	89a0      	ldrh	r0, [r4, #12]
 8002b50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002b54:	f010 0301 	ands.w	r3, r0, #1
 8002b58:	d00a      	beq.n	8002b70 <__swsetup_r+0xbc>
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60a3      	str	r3, [r4, #8]
 8002b5e:	6963      	ldr	r3, [r4, #20]
 8002b60:	425b      	negs	r3, r3
 8002b62:	61a3      	str	r3, [r4, #24]
 8002b64:	6923      	ldr	r3, [r4, #16]
 8002b66:	b943      	cbnz	r3, 8002b7a <__swsetup_r+0xc6>
 8002b68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002b6c:	d1ba      	bne.n	8002ae4 <__swsetup_r+0x30>
 8002b6e:	bd70      	pop	{r4, r5, r6, pc}
 8002b70:	0781      	lsls	r1, r0, #30
 8002b72:	bf58      	it	pl
 8002b74:	6963      	ldrpl	r3, [r4, #20]
 8002b76:	60a3      	str	r3, [r4, #8]
 8002b78:	e7f4      	b.n	8002b64 <__swsetup_r+0xb0>
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	e7f7      	b.n	8002b6e <__swsetup_r+0xba>
 8002b7e:	bf00      	nop
 8002b80:	2000000c 	.word	0x2000000c
 8002b84:	08002ff0 	.word	0x08002ff0
 8002b88:	08003010 	.word	0x08003010
 8002b8c:	08002fd0 	.word	0x08002fd0

08002b90 <_close_r>:
 8002b90:	b538      	push	{r3, r4, r5, lr}
 8002b92:	2300      	movs	r3, #0
 8002b94:	4d05      	ldr	r5, [pc, #20]	; (8002bac <_close_r+0x1c>)
 8002b96:	4604      	mov	r4, r0
 8002b98:	4608      	mov	r0, r1
 8002b9a:	602b      	str	r3, [r5, #0]
 8002b9c:	f7fd fed5 	bl	800094a <_close>
 8002ba0:	1c43      	adds	r3, r0, #1
 8002ba2:	d102      	bne.n	8002baa <_close_r+0x1a>
 8002ba4:	682b      	ldr	r3, [r5, #0]
 8002ba6:	b103      	cbz	r3, 8002baa <_close_r+0x1a>
 8002ba8:	6023      	str	r3, [r4, #0]
 8002baa:	bd38      	pop	{r3, r4, r5, pc}
 8002bac:	2000015c 	.word	0x2000015c

08002bb0 <__sflush_r>:
 8002bb0:	898a      	ldrh	r2, [r1, #12]
 8002bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bb6:	4605      	mov	r5, r0
 8002bb8:	0710      	lsls	r0, r2, #28
 8002bba:	460c      	mov	r4, r1
 8002bbc:	d458      	bmi.n	8002c70 <__sflush_r+0xc0>
 8002bbe:	684b      	ldr	r3, [r1, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	dc05      	bgt.n	8002bd0 <__sflush_r+0x20>
 8002bc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	dc02      	bgt.n	8002bd0 <__sflush_r+0x20>
 8002bca:	2000      	movs	r0, #0
 8002bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002bd2:	2e00      	cmp	r6, #0
 8002bd4:	d0f9      	beq.n	8002bca <__sflush_r+0x1a>
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002bdc:	682f      	ldr	r7, [r5, #0]
 8002bde:	602b      	str	r3, [r5, #0]
 8002be0:	d032      	beq.n	8002c48 <__sflush_r+0x98>
 8002be2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002be4:	89a3      	ldrh	r3, [r4, #12]
 8002be6:	075a      	lsls	r2, r3, #29
 8002be8:	d505      	bpl.n	8002bf6 <__sflush_r+0x46>
 8002bea:	6863      	ldr	r3, [r4, #4]
 8002bec:	1ac0      	subs	r0, r0, r3
 8002bee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002bf0:	b10b      	cbz	r3, 8002bf6 <__sflush_r+0x46>
 8002bf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002bf4:	1ac0      	subs	r0, r0, r3
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002bfc:	4628      	mov	r0, r5
 8002bfe:	6a21      	ldr	r1, [r4, #32]
 8002c00:	47b0      	blx	r6
 8002c02:	1c43      	adds	r3, r0, #1
 8002c04:	89a3      	ldrh	r3, [r4, #12]
 8002c06:	d106      	bne.n	8002c16 <__sflush_r+0x66>
 8002c08:	6829      	ldr	r1, [r5, #0]
 8002c0a:	291d      	cmp	r1, #29
 8002c0c:	d82c      	bhi.n	8002c68 <__sflush_r+0xb8>
 8002c0e:	4a2a      	ldr	r2, [pc, #168]	; (8002cb8 <__sflush_r+0x108>)
 8002c10:	40ca      	lsrs	r2, r1
 8002c12:	07d6      	lsls	r6, r2, #31
 8002c14:	d528      	bpl.n	8002c68 <__sflush_r+0xb8>
 8002c16:	2200      	movs	r2, #0
 8002c18:	6062      	str	r2, [r4, #4]
 8002c1a:	6922      	ldr	r2, [r4, #16]
 8002c1c:	04d9      	lsls	r1, r3, #19
 8002c1e:	6022      	str	r2, [r4, #0]
 8002c20:	d504      	bpl.n	8002c2c <__sflush_r+0x7c>
 8002c22:	1c42      	adds	r2, r0, #1
 8002c24:	d101      	bne.n	8002c2a <__sflush_r+0x7a>
 8002c26:	682b      	ldr	r3, [r5, #0]
 8002c28:	b903      	cbnz	r3, 8002c2c <__sflush_r+0x7c>
 8002c2a:	6560      	str	r0, [r4, #84]	; 0x54
 8002c2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c2e:	602f      	str	r7, [r5, #0]
 8002c30:	2900      	cmp	r1, #0
 8002c32:	d0ca      	beq.n	8002bca <__sflush_r+0x1a>
 8002c34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c38:	4299      	cmp	r1, r3
 8002c3a:	d002      	beq.n	8002c42 <__sflush_r+0x92>
 8002c3c:	4628      	mov	r0, r5
 8002c3e:	f000 f909 	bl	8002e54 <_free_r>
 8002c42:	2000      	movs	r0, #0
 8002c44:	6360      	str	r0, [r4, #52]	; 0x34
 8002c46:	e7c1      	b.n	8002bcc <__sflush_r+0x1c>
 8002c48:	6a21      	ldr	r1, [r4, #32]
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	4628      	mov	r0, r5
 8002c4e:	47b0      	blx	r6
 8002c50:	1c41      	adds	r1, r0, #1
 8002c52:	d1c7      	bne.n	8002be4 <__sflush_r+0x34>
 8002c54:	682b      	ldr	r3, [r5, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0c4      	beq.n	8002be4 <__sflush_r+0x34>
 8002c5a:	2b1d      	cmp	r3, #29
 8002c5c:	d001      	beq.n	8002c62 <__sflush_r+0xb2>
 8002c5e:	2b16      	cmp	r3, #22
 8002c60:	d101      	bne.n	8002c66 <__sflush_r+0xb6>
 8002c62:	602f      	str	r7, [r5, #0]
 8002c64:	e7b1      	b.n	8002bca <__sflush_r+0x1a>
 8002c66:	89a3      	ldrh	r3, [r4, #12]
 8002c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c6c:	81a3      	strh	r3, [r4, #12]
 8002c6e:	e7ad      	b.n	8002bcc <__sflush_r+0x1c>
 8002c70:	690f      	ldr	r7, [r1, #16]
 8002c72:	2f00      	cmp	r7, #0
 8002c74:	d0a9      	beq.n	8002bca <__sflush_r+0x1a>
 8002c76:	0793      	lsls	r3, r2, #30
 8002c78:	bf18      	it	ne
 8002c7a:	2300      	movne	r3, #0
 8002c7c:	680e      	ldr	r6, [r1, #0]
 8002c7e:	bf08      	it	eq
 8002c80:	694b      	ldreq	r3, [r1, #20]
 8002c82:	eba6 0807 	sub.w	r8, r6, r7
 8002c86:	600f      	str	r7, [r1, #0]
 8002c88:	608b      	str	r3, [r1, #8]
 8002c8a:	f1b8 0f00 	cmp.w	r8, #0
 8002c8e:	dd9c      	ble.n	8002bca <__sflush_r+0x1a>
 8002c90:	4643      	mov	r3, r8
 8002c92:	463a      	mov	r2, r7
 8002c94:	4628      	mov	r0, r5
 8002c96:	6a21      	ldr	r1, [r4, #32]
 8002c98:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002c9a:	47b0      	blx	r6
 8002c9c:	2800      	cmp	r0, #0
 8002c9e:	dc06      	bgt.n	8002cae <__sflush_r+0xfe>
 8002ca0:	89a3      	ldrh	r3, [r4, #12]
 8002ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002caa:	81a3      	strh	r3, [r4, #12]
 8002cac:	e78e      	b.n	8002bcc <__sflush_r+0x1c>
 8002cae:	4407      	add	r7, r0
 8002cb0:	eba8 0800 	sub.w	r8, r8, r0
 8002cb4:	e7e9      	b.n	8002c8a <__sflush_r+0xda>
 8002cb6:	bf00      	nop
 8002cb8:	20400001 	.word	0x20400001

08002cbc <_fflush_r>:
 8002cbc:	b538      	push	{r3, r4, r5, lr}
 8002cbe:	690b      	ldr	r3, [r1, #16]
 8002cc0:	4605      	mov	r5, r0
 8002cc2:	460c      	mov	r4, r1
 8002cc4:	b913      	cbnz	r3, 8002ccc <_fflush_r+0x10>
 8002cc6:	2500      	movs	r5, #0
 8002cc8:	4628      	mov	r0, r5
 8002cca:	bd38      	pop	{r3, r4, r5, pc}
 8002ccc:	b118      	cbz	r0, 8002cd6 <_fflush_r+0x1a>
 8002cce:	6983      	ldr	r3, [r0, #24]
 8002cd0:	b90b      	cbnz	r3, 8002cd6 <_fflush_r+0x1a>
 8002cd2:	f7ff fa4f 	bl	8002174 <__sinit>
 8002cd6:	4b14      	ldr	r3, [pc, #80]	; (8002d28 <_fflush_r+0x6c>)
 8002cd8:	429c      	cmp	r4, r3
 8002cda:	d11b      	bne.n	8002d14 <_fflush_r+0x58>
 8002cdc:	686c      	ldr	r4, [r5, #4]
 8002cde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0ef      	beq.n	8002cc6 <_fflush_r+0xa>
 8002ce6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002ce8:	07d0      	lsls	r0, r2, #31
 8002cea:	d404      	bmi.n	8002cf6 <_fflush_r+0x3a>
 8002cec:	0599      	lsls	r1, r3, #22
 8002cee:	d402      	bmi.n	8002cf6 <_fflush_r+0x3a>
 8002cf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002cf2:	f7ff fadd 	bl	80022b0 <__retarget_lock_acquire_recursive>
 8002cf6:	4628      	mov	r0, r5
 8002cf8:	4621      	mov	r1, r4
 8002cfa:	f7ff ff59 	bl	8002bb0 <__sflush_r>
 8002cfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d00:	4605      	mov	r5, r0
 8002d02:	07da      	lsls	r2, r3, #31
 8002d04:	d4e0      	bmi.n	8002cc8 <_fflush_r+0xc>
 8002d06:	89a3      	ldrh	r3, [r4, #12]
 8002d08:	059b      	lsls	r3, r3, #22
 8002d0a:	d4dd      	bmi.n	8002cc8 <_fflush_r+0xc>
 8002d0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d0e:	f7ff fad0 	bl	80022b2 <__retarget_lock_release_recursive>
 8002d12:	e7d9      	b.n	8002cc8 <_fflush_r+0xc>
 8002d14:	4b05      	ldr	r3, [pc, #20]	; (8002d2c <_fflush_r+0x70>)
 8002d16:	429c      	cmp	r4, r3
 8002d18:	d101      	bne.n	8002d1e <_fflush_r+0x62>
 8002d1a:	68ac      	ldr	r4, [r5, #8]
 8002d1c:	e7df      	b.n	8002cde <_fflush_r+0x22>
 8002d1e:	4b04      	ldr	r3, [pc, #16]	; (8002d30 <_fflush_r+0x74>)
 8002d20:	429c      	cmp	r4, r3
 8002d22:	bf08      	it	eq
 8002d24:	68ec      	ldreq	r4, [r5, #12]
 8002d26:	e7da      	b.n	8002cde <_fflush_r+0x22>
 8002d28:	08002ff0 	.word	0x08002ff0
 8002d2c:	08003010 	.word	0x08003010
 8002d30:	08002fd0 	.word	0x08002fd0

08002d34 <_lseek_r>:
 8002d34:	b538      	push	{r3, r4, r5, lr}
 8002d36:	4604      	mov	r4, r0
 8002d38:	4608      	mov	r0, r1
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	4d05      	ldr	r5, [pc, #20]	; (8002d54 <_lseek_r+0x20>)
 8002d40:	602a      	str	r2, [r5, #0]
 8002d42:	461a      	mov	r2, r3
 8002d44:	f7fd fe25 	bl	8000992 <_lseek>
 8002d48:	1c43      	adds	r3, r0, #1
 8002d4a:	d102      	bne.n	8002d52 <_lseek_r+0x1e>
 8002d4c:	682b      	ldr	r3, [r5, #0]
 8002d4e:	b103      	cbz	r3, 8002d52 <_lseek_r+0x1e>
 8002d50:	6023      	str	r3, [r4, #0]
 8002d52:	bd38      	pop	{r3, r4, r5, pc}
 8002d54:	2000015c 	.word	0x2000015c

08002d58 <__swhatbuf_r>:
 8002d58:	b570      	push	{r4, r5, r6, lr}
 8002d5a:	460e      	mov	r6, r1
 8002d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d60:	4614      	mov	r4, r2
 8002d62:	2900      	cmp	r1, #0
 8002d64:	461d      	mov	r5, r3
 8002d66:	b096      	sub	sp, #88	; 0x58
 8002d68:	da07      	bge.n	8002d7a <__swhatbuf_r+0x22>
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	602b      	str	r3, [r5, #0]
 8002d6e:	89b3      	ldrh	r3, [r6, #12]
 8002d70:	061a      	lsls	r2, r3, #24
 8002d72:	d410      	bmi.n	8002d96 <__swhatbuf_r+0x3e>
 8002d74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d78:	e00e      	b.n	8002d98 <__swhatbuf_r+0x40>
 8002d7a:	466a      	mov	r2, sp
 8002d7c:	f000 f8c8 	bl	8002f10 <_fstat_r>
 8002d80:	2800      	cmp	r0, #0
 8002d82:	dbf2      	blt.n	8002d6a <__swhatbuf_r+0x12>
 8002d84:	9a01      	ldr	r2, [sp, #4]
 8002d86:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002d8a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002d8e:	425a      	negs	r2, r3
 8002d90:	415a      	adcs	r2, r3
 8002d92:	602a      	str	r2, [r5, #0]
 8002d94:	e7ee      	b.n	8002d74 <__swhatbuf_r+0x1c>
 8002d96:	2340      	movs	r3, #64	; 0x40
 8002d98:	2000      	movs	r0, #0
 8002d9a:	6023      	str	r3, [r4, #0]
 8002d9c:	b016      	add	sp, #88	; 0x58
 8002d9e:	bd70      	pop	{r4, r5, r6, pc}

08002da0 <__smakebuf_r>:
 8002da0:	898b      	ldrh	r3, [r1, #12]
 8002da2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002da4:	079d      	lsls	r5, r3, #30
 8002da6:	4606      	mov	r6, r0
 8002da8:	460c      	mov	r4, r1
 8002daa:	d507      	bpl.n	8002dbc <__smakebuf_r+0x1c>
 8002dac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002db0:	6023      	str	r3, [r4, #0]
 8002db2:	6123      	str	r3, [r4, #16]
 8002db4:	2301      	movs	r3, #1
 8002db6:	6163      	str	r3, [r4, #20]
 8002db8:	b002      	add	sp, #8
 8002dba:	bd70      	pop	{r4, r5, r6, pc}
 8002dbc:	466a      	mov	r2, sp
 8002dbe:	ab01      	add	r3, sp, #4
 8002dc0:	f7ff ffca 	bl	8002d58 <__swhatbuf_r>
 8002dc4:	9900      	ldr	r1, [sp, #0]
 8002dc6:	4605      	mov	r5, r0
 8002dc8:	4630      	mov	r0, r6
 8002dca:	f7ff fa73 	bl	80022b4 <_malloc_r>
 8002dce:	b948      	cbnz	r0, 8002de4 <__smakebuf_r+0x44>
 8002dd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002dd4:	059a      	lsls	r2, r3, #22
 8002dd6:	d4ef      	bmi.n	8002db8 <__smakebuf_r+0x18>
 8002dd8:	f023 0303 	bic.w	r3, r3, #3
 8002ddc:	f043 0302 	orr.w	r3, r3, #2
 8002de0:	81a3      	strh	r3, [r4, #12]
 8002de2:	e7e3      	b.n	8002dac <__smakebuf_r+0xc>
 8002de4:	4b0d      	ldr	r3, [pc, #52]	; (8002e1c <__smakebuf_r+0x7c>)
 8002de6:	62b3      	str	r3, [r6, #40]	; 0x28
 8002de8:	89a3      	ldrh	r3, [r4, #12]
 8002dea:	6020      	str	r0, [r4, #0]
 8002dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002df0:	81a3      	strh	r3, [r4, #12]
 8002df2:	9b00      	ldr	r3, [sp, #0]
 8002df4:	6120      	str	r0, [r4, #16]
 8002df6:	6163      	str	r3, [r4, #20]
 8002df8:	9b01      	ldr	r3, [sp, #4]
 8002dfa:	b15b      	cbz	r3, 8002e14 <__smakebuf_r+0x74>
 8002dfc:	4630      	mov	r0, r6
 8002dfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e02:	f000 f897 	bl	8002f34 <_isatty_r>
 8002e06:	b128      	cbz	r0, 8002e14 <__smakebuf_r+0x74>
 8002e08:	89a3      	ldrh	r3, [r4, #12]
 8002e0a:	f023 0303 	bic.w	r3, r3, #3
 8002e0e:	f043 0301 	orr.w	r3, r3, #1
 8002e12:	81a3      	strh	r3, [r4, #12]
 8002e14:	89a0      	ldrh	r0, [r4, #12]
 8002e16:	4305      	orrs	r5, r0
 8002e18:	81a5      	strh	r5, [r4, #12]
 8002e1a:	e7cd      	b.n	8002db8 <__smakebuf_r+0x18>
 8002e1c:	0800210d 	.word	0x0800210d

08002e20 <memchr>:
 8002e20:	4603      	mov	r3, r0
 8002e22:	b510      	push	{r4, lr}
 8002e24:	b2c9      	uxtb	r1, r1
 8002e26:	4402      	add	r2, r0
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	d101      	bne.n	8002e32 <memchr+0x12>
 8002e2e:	2000      	movs	r0, #0
 8002e30:	e003      	b.n	8002e3a <memchr+0x1a>
 8002e32:	7804      	ldrb	r4, [r0, #0]
 8002e34:	3301      	adds	r3, #1
 8002e36:	428c      	cmp	r4, r1
 8002e38:	d1f6      	bne.n	8002e28 <memchr+0x8>
 8002e3a:	bd10      	pop	{r4, pc}

08002e3c <__malloc_lock>:
 8002e3c:	4801      	ldr	r0, [pc, #4]	; (8002e44 <__malloc_lock+0x8>)
 8002e3e:	f7ff ba37 	b.w	80022b0 <__retarget_lock_acquire_recursive>
 8002e42:	bf00      	nop
 8002e44:	20000154 	.word	0x20000154

08002e48 <__malloc_unlock>:
 8002e48:	4801      	ldr	r0, [pc, #4]	; (8002e50 <__malloc_unlock+0x8>)
 8002e4a:	f7ff ba32 	b.w	80022b2 <__retarget_lock_release_recursive>
 8002e4e:	bf00      	nop
 8002e50:	20000154 	.word	0x20000154

08002e54 <_free_r>:
 8002e54:	b538      	push	{r3, r4, r5, lr}
 8002e56:	4605      	mov	r5, r0
 8002e58:	2900      	cmp	r1, #0
 8002e5a:	d043      	beq.n	8002ee4 <_free_r+0x90>
 8002e5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e60:	1f0c      	subs	r4, r1, #4
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	bfb8      	it	lt
 8002e66:	18e4      	addlt	r4, r4, r3
 8002e68:	f7ff ffe8 	bl	8002e3c <__malloc_lock>
 8002e6c:	4a1e      	ldr	r2, [pc, #120]	; (8002ee8 <_free_r+0x94>)
 8002e6e:	6813      	ldr	r3, [r2, #0]
 8002e70:	4610      	mov	r0, r2
 8002e72:	b933      	cbnz	r3, 8002e82 <_free_r+0x2e>
 8002e74:	6063      	str	r3, [r4, #4]
 8002e76:	6014      	str	r4, [r2, #0]
 8002e78:	4628      	mov	r0, r5
 8002e7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e7e:	f7ff bfe3 	b.w	8002e48 <__malloc_unlock>
 8002e82:	42a3      	cmp	r3, r4
 8002e84:	d90a      	bls.n	8002e9c <_free_r+0x48>
 8002e86:	6821      	ldr	r1, [r4, #0]
 8002e88:	1862      	adds	r2, r4, r1
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	bf01      	itttt	eq
 8002e8e:	681a      	ldreq	r2, [r3, #0]
 8002e90:	685b      	ldreq	r3, [r3, #4]
 8002e92:	1852      	addeq	r2, r2, r1
 8002e94:	6022      	streq	r2, [r4, #0]
 8002e96:	6063      	str	r3, [r4, #4]
 8002e98:	6004      	str	r4, [r0, #0]
 8002e9a:	e7ed      	b.n	8002e78 <_free_r+0x24>
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	b10b      	cbz	r3, 8002ea6 <_free_r+0x52>
 8002ea2:	42a3      	cmp	r3, r4
 8002ea4:	d9fa      	bls.n	8002e9c <_free_r+0x48>
 8002ea6:	6811      	ldr	r1, [r2, #0]
 8002ea8:	1850      	adds	r0, r2, r1
 8002eaa:	42a0      	cmp	r0, r4
 8002eac:	d10b      	bne.n	8002ec6 <_free_r+0x72>
 8002eae:	6820      	ldr	r0, [r4, #0]
 8002eb0:	4401      	add	r1, r0
 8002eb2:	1850      	adds	r0, r2, r1
 8002eb4:	4283      	cmp	r3, r0
 8002eb6:	6011      	str	r1, [r2, #0]
 8002eb8:	d1de      	bne.n	8002e78 <_free_r+0x24>
 8002eba:	6818      	ldr	r0, [r3, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	4401      	add	r1, r0
 8002ec0:	6011      	str	r1, [r2, #0]
 8002ec2:	6053      	str	r3, [r2, #4]
 8002ec4:	e7d8      	b.n	8002e78 <_free_r+0x24>
 8002ec6:	d902      	bls.n	8002ece <_free_r+0x7a>
 8002ec8:	230c      	movs	r3, #12
 8002eca:	602b      	str	r3, [r5, #0]
 8002ecc:	e7d4      	b.n	8002e78 <_free_r+0x24>
 8002ece:	6820      	ldr	r0, [r4, #0]
 8002ed0:	1821      	adds	r1, r4, r0
 8002ed2:	428b      	cmp	r3, r1
 8002ed4:	bf01      	itttt	eq
 8002ed6:	6819      	ldreq	r1, [r3, #0]
 8002ed8:	685b      	ldreq	r3, [r3, #4]
 8002eda:	1809      	addeq	r1, r1, r0
 8002edc:	6021      	streq	r1, [r4, #0]
 8002ede:	6063      	str	r3, [r4, #4]
 8002ee0:	6054      	str	r4, [r2, #4]
 8002ee2:	e7c9      	b.n	8002e78 <_free_r+0x24>
 8002ee4:	bd38      	pop	{r3, r4, r5, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20000098 	.word	0x20000098

08002eec <_read_r>:
 8002eec:	b538      	push	{r3, r4, r5, lr}
 8002eee:	4604      	mov	r4, r0
 8002ef0:	4608      	mov	r0, r1
 8002ef2:	4611      	mov	r1, r2
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	4d05      	ldr	r5, [pc, #20]	; (8002f0c <_read_r+0x20>)
 8002ef8:	602a      	str	r2, [r5, #0]
 8002efa:	461a      	mov	r2, r3
 8002efc:	f7fd fcec 	bl	80008d8 <_read>
 8002f00:	1c43      	adds	r3, r0, #1
 8002f02:	d102      	bne.n	8002f0a <_read_r+0x1e>
 8002f04:	682b      	ldr	r3, [r5, #0]
 8002f06:	b103      	cbz	r3, 8002f0a <_read_r+0x1e>
 8002f08:	6023      	str	r3, [r4, #0]
 8002f0a:	bd38      	pop	{r3, r4, r5, pc}
 8002f0c:	2000015c 	.word	0x2000015c

08002f10 <_fstat_r>:
 8002f10:	b538      	push	{r3, r4, r5, lr}
 8002f12:	2300      	movs	r3, #0
 8002f14:	4d06      	ldr	r5, [pc, #24]	; (8002f30 <_fstat_r+0x20>)
 8002f16:	4604      	mov	r4, r0
 8002f18:	4608      	mov	r0, r1
 8002f1a:	4611      	mov	r1, r2
 8002f1c:	602b      	str	r3, [r5, #0]
 8002f1e:	f7fd fd1f 	bl	8000960 <_fstat>
 8002f22:	1c43      	adds	r3, r0, #1
 8002f24:	d102      	bne.n	8002f2c <_fstat_r+0x1c>
 8002f26:	682b      	ldr	r3, [r5, #0]
 8002f28:	b103      	cbz	r3, 8002f2c <_fstat_r+0x1c>
 8002f2a:	6023      	str	r3, [r4, #0]
 8002f2c:	bd38      	pop	{r3, r4, r5, pc}
 8002f2e:	bf00      	nop
 8002f30:	2000015c 	.word	0x2000015c

08002f34 <_isatty_r>:
 8002f34:	b538      	push	{r3, r4, r5, lr}
 8002f36:	2300      	movs	r3, #0
 8002f38:	4d05      	ldr	r5, [pc, #20]	; (8002f50 <_isatty_r+0x1c>)
 8002f3a:	4604      	mov	r4, r0
 8002f3c:	4608      	mov	r0, r1
 8002f3e:	602b      	str	r3, [r5, #0]
 8002f40:	f7fd fd1d 	bl	800097e <_isatty>
 8002f44:	1c43      	adds	r3, r0, #1
 8002f46:	d102      	bne.n	8002f4e <_isatty_r+0x1a>
 8002f48:	682b      	ldr	r3, [r5, #0]
 8002f4a:	b103      	cbz	r3, 8002f4e <_isatty_r+0x1a>
 8002f4c:	6023      	str	r3, [r4, #0]
 8002f4e:	bd38      	pop	{r3, r4, r5, pc}
 8002f50:	2000015c 	.word	0x2000015c

08002f54 <_init>:
 8002f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f56:	bf00      	nop
 8002f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f5a:	bc08      	pop	{r3}
 8002f5c:	469e      	mov	lr, r3
 8002f5e:	4770      	bx	lr

08002f60 <_fini>:
 8002f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f62:	bf00      	nop
 8002f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f66:	bc08      	pop	{r3}
 8002f68:	469e      	mov	lr, r3
 8002f6a:	4770      	bx	lr
